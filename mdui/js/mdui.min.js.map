{"version":3,"sources":["wrap_start.js","polyfill.js","jq.js","global.js","function.js","jq_extend.js","mutation.js","headroom.js","headroom.data.js","collapse.js","wrap_end.js","collapse.data.js","table.js","ripple.js","textfield.js","slider.js","fab.js","fab.data.js","select.js","select.data.js","appbar.js","tab.js","tab.data.js","drawer.js","drawer.data.js","dialog.js","dialog.data.js","dialog.dialog.js","dialog.alert.js","dialog.confirm.js","dialog.prompt.js","tooltip.js","tooltip.data.js","snackbar.js","bottom_nav.js","spinner.js","panel.js","panel.data.js","menu.js","menu.data.js"],"names":["global","factory","exports","module","define","amd","mdui","this","lastTime","window","requestAnimationFrame","webkitRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","$","$$1","selector","arr","JQ","html","trim","length","toCreate","indexOf","tempParent","document","createElement","innerHTML","i","childNodes","push","elems","match","querySelectorAll","getElementById","slice","i$1","ready","nodeType","i$2","extend","this$1","args","len","arguments","Object","keys","forEach","prop","target","shift","loop","isNodeName","ele","name","nodeName","toLowerCase","isObjectLike","obj","isFunction","fn","isString","isWindow","win","isDocument","doc","DOCUMENT_NODE","isArrayLike","each","call","map","ref","value","ret","elem","undefined","concat","apply","merge","first","second","val","unique","result","defaultDisplay","display","elementDisplay","body","appendChild","getComputedStyle","getPropertyValue","parentNode","removeChild","dir","nodes","nameIndex","node","j","_this","is","fnFalse","getElementId","mduiElementId","getHandlers","eventName","func","handlers","filter","handler","e","toString","sel","add","data","elementId","useCapture","split","event","callFn","_detail","preventDefault","stopPropagation","proxyfn","_data","find","get","reverse","contains","proxy","addEventListener","remove","removeEventListener","isQueryStringData","method","appendQuery","url","query","replace","self","prototype","parent","documentElement","param","destructure","key","keyTmp","v","Array","isArray","encodeURIComponent","join","el","index","$selector","not","$excludes","offset","getBoundingClientRect","left","pageXOffset","top","pageYOffset","width","height","offsetParent","css","position","parentOffset","show","style","hide","toggle","hasClass","className","classList","removeAttr","attr","removeAttribute","removeProp","eq","last","children","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","$compareWith","foundElements","_","__","childNode","has","$targets","siblings","prevAll","nextAll","closest","parents","empty","clone","cloneNode","replaceWith","newContent","before","serializeArray","elements","$elem","type","disabled","checked","serialize","props","0","1","2","defaults","set","setAttribute","getAttribute","argLength","k","classes","cls","Width","Height","IEFixValue","isWidth","parseFloat","isNaN","Number","newChild","newChilds","copyByClone","tempDiv","child","insertBefore","nextSibling","appendTo","prependTo","after","replaceAll","original","dataNS","attributes","attribute","u","charAt","toUpperCase","dataKey","removeData","n","bubbles","cancelable","t","createEvent","initMouseEvent","Event","MouseEvent","detail","initCustomEvent","CustomEvent","test","readyState","on","one","origCallback","off","eName","trigger","evt","isMouseEvent","dispatchEvent","globalOptions","jsonpID","ajaxEvent","ajaxStart","ajaxSuccess","ajaxError","ajaxComplete","ajaxSetup","options","ajax","triggerEvent","xhr","triggerCallback","result1","result2","globals","isCanceled","processData","async","cache","username","password","headers","xhrFields","statusCode","dataType","jsonp","jsonpCallback","now","contentType","timeout","callbacks","eventParams","location","sendData","ArrayBuffer","Blob","Document","FormData","constructor","callbackName","requestUrl","abortTimeout","script","onerror","src","append","XMLHttpRequest","open","setRequestHeader","crossDomain","RegExp","$2","host","xhrTimeout","onload","textStatus","responseData","isHttpStatusSuccess","status","JSON","parse","responseText","err","responseType","response","statusText","onabort","abort","send","params","$document","$window","queue","queueData","queueName","dequeue","TouchHandler","touches","isAllow","allow","register","start","move","end","cancel","unlock","addClass","parseOptions","str","Function","substr","componentEvent","pluginName","inst","fullEventName","jQuery","reflow","clientLeft","transition","duration","webkitTransitionDuration","transitionDuration","transitionEnd","fireCallBack","events","transformOrigin","webkitTransformOrigin","transform","webkitTransform","showOverlay","zIndex","$overlay","level","hideOverlay","force","removeClass","lockScreen","$body","newBodyWidth","unlockScreen","throttle","delay","timer","GUID","guid","s4","floor","random","substring","mutation","apiInit","that","item","$this","m","entries","Headroom","opts","$headroom","oldInst","DEFAULT","tolerance","down","up","_init","initialClass","pinnedClass","unpinnedClass","state","inited","lastScrollY","_attachEvent","_scroll","rafId","currentScrollY","direction","toleranceExceeded","abs","unpin","pin","enable","disable","getState","CollapsePrivate","Collapse","namespace","ns","classpPefix","class_item","class_item_open","class_header","class_body","$collapse","$item","_isOpen","close","accordion","_getItem","parseInt","$content","$tmpItem","scrollHeight","openAll","closeAll","$target","Table","$table","init","checkboxHTML","tag","$thRow","$tdRows","$tdCheckboxs","selectable","selectedRow","_updateThCheckbox","_updateTdCheckbox","_updateNumericCol","$tdRow","$checkbox","$thCheckbox","isCheckedAll","checkbox","row","$th","th","updateTables","removeRipple","$wave","removeTimeout","translate","Ripple","$ripple","button","tmp","touchStartX","pageX","touchStartY","pageY","center","x","y","innerHeight","innerWidth","diameter","pow","hidden","hideRipple","hideEvent","moveEvent","getProp","input","$input","reInit","domLoadedEvent","$textField","validity","valid","inputValue","hasExtraSpace","maxlength","text","focus","updateTextFields","updateValueStyle","$slider","$track","$fill","$thumb","min","isDisabled","isDiscrete","discrete","$thumbText","percent","rangeSelector","updateSliders","Fab","$fab","$btn","$dial","$dialBtns","btn","Select","$selectNative","uniqueID","handleUpdate","$select","gutter","readjustMenu","transformOriginY","menuMarginTop","windowHeight","selectHeight","$menuItemFirst","$items","menuItemHeight","menuItemMargin","menuWidth","menuHeight","size","selectTop","heightTemp","selectedIndex","menuMarginTopMax","menuTop","$menu","margin-top","transform-origin","option","textContent","selected","$selected","itemData","Tab","$tab","$tabs","$indicator","activeIndex","hash","tab","_setActive","_setIndicatorPosition","_bindTabEvent","$ele","clickEvent","targetId","$activeTab","activeTabOffset","scrollLeft","next","prev","$oldTabs","$newTabs","oldTabsEle","newTabsEle","Drawer","$drawer","overlay","isDesktop","swipeSupport","swipe","setPosition","translateX","closeTransform","transformCSS","cleanPosition","getMaxTranslateX","getTranslateX","currentX","swiping","swipeStartX","onBodyTouchStart","swipeAreaWidth","openNavEventHandler","maybeSwiping","touchmove","onBodyTouchMove","touchend","onBodyTouchEnd","touchcancel","touchX","touchY","dXAbs","dYAbs","changedTouches","translateRatio","swipingState","Dialog","$dialog","closeOnCancel","closeOnConfirm","isLockScreen","currentInst","history","modal","closeOnEsc","destroyOnClosed","readjust","$dialogTitle","$dialogContent","$dialogActions","dialogHeight","hashchangeEvent","overlayClick","destroy","_doOpen","_arguments","back","keyCode","dialog","title","content","buttons","stackedButtons","cssClass","onOpen","onOpened","onClose","onClosed","DEFAULT_BUTTON","bold","onClick","buttonsHTML","HTML","alert","onConfirm","confirmText","confirm","onCancel","cancelText","prompt","label","defaultValue","confirmOnEnter","Tooltip","marginLeft","marginTop","targetProps","targetMargin","tooltipWidth","$tooltip","offsetWidth","tooltipHeight","offsetHeight","targetOffset","margin-left","oldOpts","timeoutId","Snackbar","message","buttonColorStyle","buttonColorClass","buttonColor","$snackbar","buttonText","_setPosition","closeOnButtonClick","closeOnOutsideClick","onButtonClick","translateY","snackbarHeight","clientHeight","snackbar","isThis","$bottomNav","layerHTML","fillHTML","spinner","layer","$spinner","updateSpinners","Panel","Menu","anchorSelector","menuSelector","$anchor","isCascade","covered","isCovered","bindSubMenuEvent","align","fixed","subMenuTrigger","subMenuDelay","menuLeft","transformOriginX","windowWidth","isFixed","anchorTmp","anchorTop","anchorLeft","anchorHeight","anchorWidth","anchorBottom","anchorRight","anchorOffsetTop","offsetTop","anchorOffsetLeft","offsetLeft","menuHeightTemp","menuWidthTemp","readjustSubmenu","$submenu","submenuTop","submenuLeft","submenuWidth","submenuHeight","itemTmp","itemWidth","itemHeight","itemLeft","itemTop","openSubMenu","closeSubMenu","$subSubmenu","toggleSubMenu","$tmpSubmenu","timeoutOpen","timeoutClose","eventType","$relatedTarget","relatedTarget","tmpClose","tmpOpen"],"mappings":"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","file":"mdui.min.js","sourcesContent":["/* jshint ignore:start */\n;(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.mdui = factory());\n}(this, (function() {\n  'use strict';\n\n  /* jshint ignore:end */\n  var mdui = {};\n","/**\n * =============================================================================\n * ************   浏览器兼容性问题修复   ************\n * =============================================================================\n */\n\n/**\n * requestAnimationFrame\n * cancelAnimationFrame\n */\n(function () {\n  var lastTime = 0;\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = window.webkitRequestAnimationFrame;\n    window.cancelAnimationFrame = window.webkitCancelAnimationFrame;\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));\n\n      var id = window.setTimeout(function () {\n          callback(currTime + timeToCall);\n        }, timeToCall);\n\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n})();\n","/**\n * JQ 1.0.0 (https://github.com/zdhxiong/mdui.JQ#readme)\n * Copyright 2018-2018 zdhxiong\n * Licensed under MIT\n */\nvar $ = (function () {\n  'use strict';\n\n  var JQ = function JQ(arr) {\n    var self = this;\n\n    for (var i = 0; i < arr.length; i += 1) {\n      self[i] = arr[i];\n    }\n\n    self.length = arr.length;\n\n    return this;\n  };\n\n  function $$1(selector) {\n    var arr = [];\n\n    if (!selector) {\n      return new JQ(arr);\n    }\n\n    if (selector instanceof JQ) {\n      return selector;\n    }\n\n    if (typeof selector === 'string') {\n      var html = selector.trim();\n\n      if (html[0] === '<' && html[html.length - 1] === '>') {\n        // 创建 HTML 字符串\n        var toCreate = 'div';\n\n        if (html.indexOf('<li') === 0) {\n          toCreate = 'ul';\n        }\n\n        if (html.indexOf('<tr') === 0) {\n          toCreate = 'tbody';\n        }\n\n        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {\n          toCreate = 'tr';\n        }\n\n        if (html.indexOf('<tbody') === 0) {\n          toCreate = 'table';\n        }\n\n        if (html.indexOf('<option') === 0) {\n          toCreate = 'select';\n        }\n\n        var tempParent = document.createElement(toCreate);\n        tempParent.innerHTML = html;\n\n        for (var i = 0; i < tempParent.childNodes.length; i += 1) {\n          arr.push(tempParent.childNodes[i]);\n        }\n      } else {\n        // 选择器\n        var elems = selector[0] === '#' && !selector.match(/[ .<>:~]/)\n          ? [document.getElementById(selector.slice(1))]\n          : document.querySelectorAll(selector);\n\n        for (var i$1 = 0; i$1 < elems.length; i$1 += 1) {\n          if (elems[i$1]) {\n            arr.push(elems[i$1]);\n          }\n        }\n      }\n    } else if (typeof selector === 'function') {\n      // function\n      return $$1(document).ready(selector);\n    } else if (selector.nodeType || selector === window || selector === document) {\n      // Node\n      arr.push(selector);\n    } else if (selector.length > 0 && selector[0].nodeType) {\n      // NodeList\n      for (var i$2 = 0; i$2 < selector.length; i$2 += 1) {\n        arr.push(selector[i$2]);\n      }\n    }\n\n    return new JQ(arr);\n  }\n\n  $$1.fn = JQ.prototype;\n\n  function extend() {\n    var this$1 = this;\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (!args.length) {\n      return this;\n    }\n\n    // $.extend(obj)\n    if (args.length === 1) {\n      Object.keys(args[0]).forEach(function (prop) {\n        this$1[prop] = args[0][prop];\n      });\n\n      return this;\n    }\n\n    // $.extend({}, defaults[, obj])\n    var target = args.shift();\n\n    var loop = function ( i ) {\n      Object.keys(args[i]).forEach(function (prop) {\n        target[prop] = args[i][prop];\n      });\n    };\n\n    for (var i = 0; i < args.length; i += 1) loop( i );\n\n    return target;\n  }\n\n  $$1.fn.extend = extend;\n  $$1.extend = extend;\n\n  /**\n   * 判断一个节点名\n   * @param ele\n   * @param name\n   * @returns {boolean}\n   */\n  function isNodeName(ele, name) {\n    return ele.nodeName && ele.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  /**\n   * 除去 null 后的 object 类型\n   * @param obj\n   * @returns {*|boolean}\n   */\n  function isObjectLike(obj) {\n    return typeof obj === 'object' && obj !== null;\n  }\n\n  function isFunction(fn) {\n    return typeof fn === 'function';\n  }\n\n  function isString(obj) {\n    return typeof obj === 'string';\n  }\n\n  function isWindow(win) {\n    return win && win === win.window;\n  }\n\n  function isDocument(doc) {\n    return doc && doc.nodeType === doc.DOCUMENT_NODE;\n  }\n\n  function isArrayLike(obj) {\n    return typeof obj.length === 'number';\n  }\n\n  /**\n   * 循环数组或对象\n   * @param obj\n   * @param callback\n   * @returns {*}\n   */\n  function each(obj, callback) {\n    if (isArrayLike(obj)) {\n      for (var i = 0; i < obj.length; i += 1) {\n        if (callback.call(obj[i], i, obj[i]) === false) {\n          return obj;\n        }\n      }\n    } else {\n      var keys = Object.keys(obj);\n      for (var i$1 = 0; i$1 < keys.length; i$1 += 1) {\n        if (callback.call(obj[keys[i$1]], keys[i$1], obj[keys[i$1]]) === false) {\n          return obj;\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  /**\n   * 遍历数组或对象，通过函数返回一个新的数组或对象，null 和 undefined 将被过滤掉。\n   * @param elems\n   * @param callback\n   * @returns {Array}\n   */\n  function map(elems, callback) {\n    var ref;\n\n    var value;\n    var ret = [];\n\n    each(elems, function (i, elem) {\n      value = callback(elem, i);\n\n      if (value !== null && value !== undefined) {\n        ret.push(value);\n      }\n    });\n\n    return (ref = []).concat.apply(ref, ret);\n  }\n\n  /**\n   * 把对象合并到第一个参数中，并返回第一个参数\n   * @param first\n   * @param second\n   * @returns {*}\n   */\n  function merge(first, second) {\n    each(second, function (i, val) {\n      first.push(val);\n    });\n\n    return first;\n  }\n\n  /**\n   * 删除数组中重复元素\n   * @param arr {Array}\n   * @returns {Array}\n   */\n  function unique(arr) {\n    var result = [];\n\n    for (var i = 0; i < arr.length; i += 1) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n\n    return result;\n  }\n\n  var elementDisplay = {};\n\n  /**\n   * 获取元素的默认 display 样式值，用于 .show() 方法\n   * @param nodeName\n   * @returns {*}\n   */\n  function defaultDisplay(nodeName) {\n    var element;\n    var display;\n\n    if (!elementDisplay[nodeName]) {\n      element = document.createElement(nodeName);\n      document.body.appendChild(element);\n      display = getComputedStyle(element, '').getPropertyValue('display');\n      element.parentNode.removeChild(element);\n      if (display === 'none') {\n        display = 'block';\n      }\n\n      elementDisplay[nodeName] = display;\n    }\n\n    return elementDisplay[nodeName];\n  }\n\n  $$1.extend({\n    each: each,\n    merge: merge,\n    unique: unique,\n    map: map,\n\n    /**\n     * 一个 DOM 节点是否包含另一个 DOM 节点\n     * @param parent {Node} 父节点\n     * @param node {Node} 子节点\n     * @returns {Boolean}\n     */\n    contains: function contains(parent, node) {\n      if (parent && !node) {\n        return document.documentElement.contains(parent);\n      }\n\n      return parent !== node && parent.contains(node);\n    },\n\n    /**\n     * 将数组或对象序列化\n     * @param obj\n     * @returns {String}\n     */\n    param: function param(obj) {\n      if (!isObjectLike(obj)) {\n        return '';\n      }\n\n      var args = [];\n\n      function destructure(key, value) {\n        var keyTmp;\n\n        if (isObjectLike(value)) {\n          each(value, function (i, v) {\n            if (Array.isArray(value) && !isObjectLike(v)) {\n              keyTmp = '';\n            } else {\n              keyTmp = i;\n            }\n\n            destructure((key + \"[\" + keyTmp + \"]\"), v);\n          });\n        } else {\n          if (value !== null && value !== '') {\n            keyTmp = \"=\" + (encodeURIComponent(value));\n          } else {\n            keyTmp = '';\n          }\n\n          args.push(encodeURIComponent(key) + keyTmp);\n        }\n      }\n\n      each(obj, function (key, value) {\n        destructure(key, value);\n      });\n\n      return args.join('&');\n    },\n  });\n\n  $$1.fn.extend({\n    /**\n     * 遍历对象\n     * @param callback {Function}\n     * @return {JQ}\n     */\n    each: function each$1(callback) {\n      return each(this, callback);\n    },\n\n    /**\n     * 通过遍历集合中的节点对象，通过函数返回一个新的对象，null 或 undefined 将被过滤掉。\n     * @param callback {Function}\n     * @returns {JQ}\n     */\n    map: function map$1(callback) {\n      return new JQ(map(this, function (el, i) { return callback.call(el, i, el); }));\n    },\n\n    /**\n     * 获取指定 DOM 元素，没有 index 参数时，获取所有 DOM 的数组\n     * @param index {Number=}\n     * @returns {Node|Array}\n     */\n    get: function get(index) {\n      return index === undefined\n        ? [].slice.call(this)\n        : this[index >= 0 ? index : index + this.length];\n    },\n\n    /**\n     * array中提取的方法。从start开始，如果end 指出。提取不包含end位置的元素。\n     * @param args {start, end}\n     * @returns {JQ}\n     */\n    slice: function slice() {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return new JQ([].slice.apply(this, args));\n    },\n\n    /**\n     * 筛选元素集合\n     * @param selector {String|JQ|Node|Function}\n     * @returns {JQ}\n     */\n    filter: function filter(selector) {\n      if (isFunction(selector)) {\n        return this.map(function (index, ele) { return (selector.call(ele, index, ele) ? ele : undefined); });\n      }\n\n      var $selector = $$1(selector);\n\n      return this.map(function (index, ele) { return ($selector.index(ele) > -1 ? ele : undefined); });\n    },\n\n    /**\n     * 从元素集合中删除指定的元素\n     * @param selector {String|Node|JQ|Function}\n     * @return {JQ}\n     */\n    not: function not(selector) {\n      var $excludes = this.filter(selector);\n\n      return this.map(function (index, ele) { return ($excludes.index(ele) > -1 ? undefined : ele); });\n    },\n\n    /**\n     * 获取元素相对于 document 的偏移\n     * @returns {Object}\n     */\n    offset: function offset() {\n      if (this[0]) {\n        var offset = this[0].getBoundingClientRect();\n\n        return {\n          left: offset.left + window.pageXOffset,\n          top: offset.top + window.pageYOffset,\n          width: offset.width,\n          height: offset.height,\n        };\n      }\n\n      return null;\n    },\n\n    /**\n     * 返回最近的用于定位的父元素\n     * @returns {*|JQ}\n     */\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var parent = this.offsetParent;\n\n        while (parent && $$1(parent).css('position') === 'static') {\n          parent = parent.offsetParent;\n        }\n\n        return parent || document.documentElement;\n      });\n    },\n\n    /**\n     * 获取元素相对于父元素的偏移\n     * @return {Object}\n     */\n    position: function position() {\n      var self = this;\n\n      if (!self[0]) {\n        return null;\n      }\n\n      var offsetParent;\n      var offset;\n      var parentOffset = {\n        top: 0,\n        left: 0,\n      };\n\n      if (self.css('position') === 'fixed') {\n        offset = self[0].getBoundingClientRect();\n      } else {\n        offsetParent = self.offsetParent();\n        offset = self.offset();\n        if (!isNodeName(offsetParent[0], 'html')) {\n          parentOffset = offsetParent.offset();\n        }\n\n        parentOffset = {\n          top: parentOffset.top + offsetParent.css('borderTopWidth'),\n          left: parentOffset.left + offsetParent.css('borderLeftWidth'),\n        };\n      }\n\n      return {\n        top: offset.top - parentOffset.top - self.css('marginTop'),\n        left: offset.left - parentOffset.left - self.css('marginLeft'),\n        width: offset.width,\n        height: offset.height,\n      };\n    },\n\n    /**\n     * 显示指定元素\n     * @returns {JQ}\n     */\n    show: function show() {\n      return this.each(function () {\n        if (this.style.display === 'none') {\n          this.style.display = '';\n        }\n\n        if (window.getComputedStyle(this, '').getPropertyValue('display') === 'none') {\n          this.style.display = defaultDisplay(this.nodeName);\n        }\n      });\n    },\n\n    /**\n     * 隐藏指定元素\n     * @returns {JQ}\n     */\n    hide: function hide() {\n      return this.each(function () {\n        this.style.display = 'none';\n      });\n    },\n\n    /**\n     * 切换元素的显示状态\n     * @returns {JQ}\n     */\n    toggle: function toggle() {\n      return this.each(function () {\n        this.style.display = this.style.display === 'none' ? '' : 'none';\n      });\n    },\n\n    /**\n     * 是否含有指定的 CSS 类\n     * @param className {String}\n     * @returns {boolean}\n     */\n    hasClass: function hasClass(className) {\n      if (!this[0] || !className) {\n        return false;\n      }\n\n      return this[0].classList.contains(className);\n    },\n\n    /**\n     * 移除指定属性\n     * @param attr {String}\n     * @returns {JQ}\n     */\n    removeAttr: function removeAttr(attr) {\n      return this.each(function () {\n        this.removeAttribute(attr);\n      });\n    },\n\n    /**\n     * 删除属性值\n     * @param name {String}\n     * @returns {JQ}\n     */\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        try {\n          delete this[name];\n        } catch (e) {\n          // empty\n        }\n      });\n    },\n\n    /**\n     * 获取当前对象中第n个元素\n     * @param index {Number}\n     * @returns {JQ}\n     */\n    eq: function eq(index) {\n      var ret = index === -1\n        ? this.slice(index)\n        : this.slice(index, +index + 1);\n\n      return new JQ(ret);\n    },\n\n    /**\n     * 获取对象中第一个元素\n     * @returns {JQ}\n     */\n    first: function first() {\n      return this.eq(0);\n    },\n\n    /**\n     * 获取对象中最后一个元素\n     * @returns {JQ}\n     */\n    last: function last() {\n      return this.eq(-1);\n    },\n\n    /**\n     * 获取一个元素的位置。\n     * 当 elem 参数没有给出时，返回当前元素在兄弟节点中的位置。\n     * 有给出了 elem 参数时，返回 elem 元素在当前对象中的位置\n     * @param elem {Selector|Node=}\n     * @returns {Number}\n     */\n    index: function index(elem) {\n      if (!elem) {\n        // 获取当前 JQ 对象的第一个元素在同辈元素中的位置\n        return this\n          .eq(0)\n          .parent()\n          .children()\n          .get()\n          .indexOf(this[0]);\n      }\n\n      if (isString(elem)) {\n        // 返回当前 JQ 对象的第一个元素在指定选择器对应的元素中的位置\n        return $$1(elem)\n          .eq(0)\n          .parent()\n          .children()\n          .get()\n          .indexOf(this[0]);\n      }\n\n      // 返回指定元素在当前 JQ 对象中的位置\n      return this\n        .get()\n        .indexOf(elem);\n    },\n\n    /**\n     * 根据选择器、DOM元素或 JQ 对象来检测匹配元素集合，\n     * 如果其中至少有一个元素符合这个给定的表达式就返回true\n     * @param selector {String|Node|NodeList|Array|JQ|Window}\n     * @returns boolean\n     */\n    is: function is(selector) {\n      var self = this[0];\n\n      if (!self || selector === undefined || selector === null) {\n        return false;\n      }\n\n      if (isString(selector)) {\n        if (self === document || self === window) {\n          return false;\n        }\n\n        var matchesSelector = self.matches\n          || self.matchesSelector\n          || self.webkitMatchesSelector\n          || self.mozMatchesSelector\n          || self.oMatchesSelector\n          || self.msMatchesSelector;\n\n        return matchesSelector.call(self, selector);\n      }\n\n      if (selector === document || selector === window) {\n        return self === selector;\n      }\n\n      if (selector.nodeType || isArrayLike(selector)) {\n        var $compareWith = selector.nodeType ? [selector] : selector;\n\n        for (var i = 0; i < $compareWith.length; i += 1) {\n          if ($compareWith[i] === self) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return false;\n    },\n\n    /**\n     * 根据 CSS 选择器找到后代节点的集合\n     * @param selector {String}\n     * @returns {JQ}\n     */\n    find: function find(selector) {\n      var foundElements = [];\n\n      this.each(function (i, _this) {\n        var nodeType = _this.nodeType;\n\n        if (nodeType !== 1 && nodeType !== 9) {\n          // 不是 element 和 document 则跳过\n          return;\n        }\n\n        merge(foundElements, _this.querySelectorAll(selector));\n      });\n\n      return new JQ(foundElements);\n    },\n\n    /**\n     * 找到直接子元素的元素集合\n     * @param selector {String=}\n     * @returns {JQ}\n     */\n    children: function children(selector) {\n      var children = [];\n\n      this.each(function (_, _this) {\n        each(_this.childNodes, function (__, childNode) {\n          if (childNode.nodeType !== 1) {\n            return;\n          }\n\n          if (!selector || (selector && $$1(childNode).is(selector))) {\n            children.push(childNode);\n          }\n        });\n      });\n\n      return new JQ(unique(children));\n    },\n\n    /**\n     * 保留含有指定子元素的元素，去掉不含有指定子元素的元素\n     * @param selector {String|Node|JQ|NodeList|Array}\n     * @return {JQ}\n     */\n    has: function has(selector) {\n      var $targets = isString(selector) ? this.find(selector) : $$1(selector);\n      var length = $targets.length;\n\n      return this.filter(function () {\n        var this$1 = this;\n\n        for (var i = 0; i < length; i += 1) {\n          if ($$1.contains(this$1, $targets[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n    },\n\n    /**\n     * 取得同辈元素的集合\n     * @param selector {String=}\n     * @returns {JQ}\n     */\n    siblings: function siblings(selector) {\n      return this.prevAll(selector).add(this.nextAll(selector));\n    },\n\n    /**\n     * 返回首先匹配到的父节点，包含父节点\n     * @param selector {String}\n     * @returns {JQ}\n     */\n    closest: function closest(selector) {\n      var self = this;\n\n      if (!self.is(selector)) {\n        self = self.parents(selector).eq(0);\n      }\n\n      return self;\n    },\n\n    /**\n     * 删除所有匹配的元素\n     * @returns {JQ}\n     */\n    remove: function remove() {\n      return this.each(function (i, _this) {\n        if (_this.parentNode) {\n          _this.parentNode.removeChild(_this);\n        }\n      });\n    },\n\n    /**\n     * 添加匹配的元素到当前对象中\n     * @param selector {String|JQ}\n     * @returns {JQ}\n     */\n    add: function add(selector) {\n      return new JQ(unique(merge(this.get(), $$1(selector))));\n    },\n\n    /**\n     * 删除子节点\n     * @returns {JQ}\n     */\n    empty: function empty() {\n      return this.each(function () {\n        this.innerHTML = '';\n      });\n    },\n\n    /**\n     * 通过深度克隆来复制集合中的所有元素。\n     * (通过原生 cloneNode 方法深度克隆来复制集合中的所有元素。此方法不会有数据和事件处理程序复制到新的元素。这点和jquery中利用一个参数来确定是否复制数据和事件处理不相同。)\n     * @returns {JQ}\n     */\n    clone: function clone() {\n      return this.map(function () {\n        return this.cloneNode(true);\n      });\n    },\n\n    /**\n     * 用新元素替换当前元素\n     * @param newContent {String|Node|NodeList|JQ}\n     * @returns {JQ}\n     */\n    replaceWith: function replaceWith(newContent) {\n      return this.before(newContent).remove();\n    },\n\n    /**\n     * 将表单元素的值组合成键值对数组\n     * @returns {Array}\n     */\n    serializeArray: function serializeArray() {\n      var result = [];\n      var elem = this[0];\n\n      if (!elem || !elem.elements) {\n        return result;\n      }\n\n      $$1([].slice.call(elem.elements)).each(function () {\n        var $elem = $$1(this);\n        var type = $elem.attr('type');\n        if (\n          this.nodeName.toLowerCase() !== 'fieldset'\n          && !this.disabled\n          && ['submit', 'reset', 'button'].indexOf(type) === -1\n          && (['radio', 'checkbox'].indexOf(type) === -1 || this.checked)\n        ) {\n          result.push({\n            name: $elem.attr('name'),\n            value: $elem.val(),\n          });\n        }\n      });\n\n      return result;\n    },\n\n    /**\n     * 将表单元素或对象序列化\n     * @returns {String}\n     */\n    serialize: function serialize() {\n      var result = [];\n\n      each(this.serializeArray(), function (i, elem) {\n        result.push(((encodeURIComponent(elem.name)) + \"=\" + (encodeURIComponent(elem.value))));\n      });\n\n      return result.join('&');\n    },\n  });\n\n  /**\n   * val - 获取或设置元素的值\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  /**\n   * html - 获取或设置元素的 HTML\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  /**\n   * text - 获取或设置元素的内容\n   * @param value {String=}\n   * @return {*|JQ}\n   */\n  each(['val', 'html', 'text'], function (nameIndex, name) {\n    var props = {\n      0: 'value',\n      1: 'innerHTML',\n      2: 'textContent',\n    };\n\n    var defaults = {\n      0: undefined,\n      1: undefined,\n      2: null,\n    };\n\n    $$1.fn[name] = function (value) {\n      if (value === undefined) {\n        // 获取值\n        return this[0] ? this[0][props[nameIndex]] : defaults[nameIndex];\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        elem[props[nameIndex]] = value;\n      });\n    };\n  });\n\n  /**\n   * attr - 获取或设置元素的属性值\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  /**\n   * prop - 获取或设置元素的属性值\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  /**\n   * css - 获取或设置元素的样式\n   * @param {name|props|key,value=}\n   * @return {String|JQ}\n   */\n  each(['attr', 'prop', 'css'], function (nameIndex, name) {\n    function set(elem, key, value) {\n      if (nameIndex === 0) {\n        elem.setAttribute(key, value);\n      } else if (nameIndex === 1) {\n        elem[key] = value;\n      } else {\n        elem.style[key] = value;\n      }\n    }\n\n    function get(elem, key) {\n      if (!elem) {\n        return undefined;\n      }\n\n      if (nameIndex === 0) {\n        return elem.getAttribute(key);\n      }\n\n      if (nameIndex === 1) {\n        return elem[key];\n      }\n\n      return window.getComputedStyle(elem, null).getPropertyValue(key);\n    }\n\n    $$1.fn[name] = function (key, value) {\n      var argLength = arguments.length;\n\n      if (argLength === 1 && isString(key)) {\n        // 获取值\n        return get(this[0], key);\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        if (argLength === 2) {\n          set(elem, key, value);\n        } else {\n          each(key, function (k, v) {\n            set(elem, k, v);\n          });\n        }\n      });\n    };\n  });\n\n  /**\n   * addClass - 添加 CSS 类，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  /**\n   * removeClass - 移除 CSS 类，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  /**\n   * toggleClass - 切换 CSS 类名，多个类名用空格分割\n   * @param className {String}\n   * @return {JQ}\n   */\n  each(['add', 'remove', 'toggle'], function (nameIndex, name) {\n    $$1.fn[(name + \"Class\")] = function (className) {\n      if (!className) {\n        return this;\n      }\n\n      var classes = className.split(' ');\n\n      return this.each(function (i, elem) {\n        each(classes, function (j, cls) {\n          elem.classList[name](cls);\n        });\n      });\n    };\n  });\n\n  /**\n   * width - 获取元素的宽度\n   * @return {Number}\n   */\n  /**\n   * height - 获取元素的高度\n   * @return {Number}\n   */\n  each({\n    Width: 'width',\n    Height: 'height',\n  }, function (prop, name) {\n    $$1.fn[name] = function (val) {\n      if (val === undefined) {\n        // 获取\n        var elem = this[0];\n\n        if (isWindow(elem)) {\n          return elem[(\"inner\" + prop)];\n        }\n\n        if (isDocument(elem)) {\n          return elem.documentElement[(\"scroll\" + prop)];\n        }\n\n        var $elem = $$1(elem);\n\n        // IE10、IE11 在 box-sizing:border-box 时，不会包含 padding 和 border，这里进行修复\n        var IEFixValue = 0;\n        var isWidth = name === 'width';\n        if ('ActiveXObject' in window) { // 判断是 IE 浏览器\n          if ($elem.css('box-sizing') === 'border-box') {\n            IEFixValue = parseFloat($elem.css((\"padding-\" + (isWidth ? 'left' : 'top'))))\n              + parseFloat($elem.css((\"padding-\" + ((isWidth ? 'right' : 'bottom')))))\n              + parseFloat($elem.css((\"border-\" + (isWidth ? 'left' : 'top') + \"-width\")))\n              + parseFloat($elem.css((\"border-\" + (isWidth ? 'right' : 'bottom') + \"-width\")));\n          }\n        }\n\n        return parseFloat($$1(elem).css(name)) + IEFixValue;\n      }\n\n      // 设置\n      /* eslint no-restricted-globals: 0 */\n      if (!isNaN(Number(val)) && val !== '') {\n        val += 'px';\n      }\n\n      return this.css(name, val);\n    };\n  });\n\n  /**\n   * innerWidth - 获取元素的宽度，包含内边距\n   * @return {Number}\n   */\n  /**\n   * innerHeight - 获取元素的高度，包含内边距\n   * @return {Number}\n   */\n  each({\n    Width: 'width',\n    Height: 'height',\n  }, function (prop, name) {\n    $$1.fn[(\"inner\" + prop)] = function () {\n      var value = this[name]();\n      var $elem = $$1(this[0]);\n\n      if ($elem.css('box-sizing') !== 'border-box') {\n        value += parseFloat($elem.css((\"padding-\" + (name === 'width' ? 'left' : 'top'))));\n        value += parseFloat($elem.css((\"padding-\" + (name === 'width' ? 'right' : 'bottom'))));\n      }\n\n      return value;\n    };\n  });\n\n  function dir(nodes, selector, nameIndex, node) {\n    var ret = [];\n    var elem;\n\n    nodes.each(function (j, _this) {\n      elem = _this[node];\n      while (elem) {\n        if (nameIndex === 2) {\n          // prevUntil\n          if (!selector || (selector && $$1(elem).is(selector))) {\n            break;\n          }\n\n          ret.push(elem);\n        } else if (nameIndex === 0) {\n          // prev\n          if (!selector || (selector && $$1(elem).is(selector))) {\n            ret.push(elem);\n          }\n\n          break;\n        } else if (!selector || (selector && $$1(elem).is(selector))) {\n          // prevAll\n          ret.push(elem);\n        }\n\n        elem = elem[node];\n      }\n    });\n\n    return new JQ(unique(ret));\n  }\n\n  /**\n   * prev - 取得前一个匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * prevAll - 取得前面所有匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * prevUntil - 取得前面的所有元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 'All', 'Until'], function (nameIndex, name) {\n    $$1.fn[(\"prev\" + name)] = function (selector) {\n      // prevAll、prevUntil 需要把元素的顺序倒序处理，以便和 jQuery 的结果一致\n      var $nodes = nameIndex === 0 ? this : $$1(this.get().reverse());\n\n      return dir($nodes, selector, nameIndex, 'previousElementSibling');\n    };\n  });\n\n  /**\n   * next - 取得后一个匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * nextAll - 取得后面所有匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * nextUntil - 取得后面所有匹配的元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 'All', 'Until'], function (nameIndex, name) {\n    $$1.fn[(\"next\" + name)] = function (selector) {\n      return dir(this, selector, nameIndex, 'nextElementSibling');\n    };\n  });\n\n  /**\n   * parent - 取得匹配的直接父元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * parents - 取得所有匹配的父元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  /**\n   * parentUntil - 取得所有的父元素，直到遇到匹配的元素，不包含匹配的元素\n   * @param selector {String=}\n   * @return {JQ}\n   */\n  each(['', 's', 'sUntil'], function (nameIndex, name) {\n    $$1.fn[(\"parent\" + name)] = function (selector) {\n      // parents、parentsUntil 需要把元素的顺序反向处理，以便和 jQuery 的结果一致\n      var $nodes = nameIndex === 0 ? this : $$1(this.get().reverse());\n\n      return dir($nodes, selector, nameIndex, 'parentNode');\n    };\n  });\n\n  /**\n   * append - 在元素内部追加内容\n   * @param newChild {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * prepend - 在元素内部前置内容\n   * @param newChild {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each(['append', 'prepend'], function (nameIndex, name) {\n    $$1.fn[name] = function (newChild) {\n      var newChilds;\n      var copyByClone = this.length > 1;\n\n      if (isString(newChild)) {\n        var tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n        newChilds = [].slice.call(tempDiv.childNodes);\n      } else {\n        newChilds = $$1(newChild).get();\n      }\n\n      if (nameIndex === 1) {\n        // prepend\n        newChilds.reverse();\n      }\n\n      return this.each(function (i, _this) {\n        each(newChilds, function (j, child) {\n          // 一个元素要同时追加到多个元素中，需要先复制一份，然后追加\n          if (copyByClone && i > 0) {\n            child = child.cloneNode(true);\n          }\n\n          if (nameIndex === 0) {\n            // append\n            _this.appendChild(child);\n          } else {\n            // prepend\n            _this.insertBefore(child, _this.childNodes[0]);\n          }\n        });\n      });\n    };\n  });\n\n  /**\n   * insertBefore - 插入到指定元素的前面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * insertAfter - 插入到指定元素的后面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each(['insertBefore', 'insertAfter'], function (nameIndex, name) {\n    $$1.fn[name] = function (selector) {\n      var $elem = $$1(selector);\n\n      return this.each(function (i, _this) {\n        $elem.each(function (j, elem) {\n          elem.parentNode.insertBefore(\n            $elem.length === 1 ? _this : _this.cloneNode(true),\n            nameIndex === 0 ? elem : elem.nextSibling\n          );\n        });\n      });\n    };\n  });\n\n  /**\n   * appendTo - 追加到指定元素内容\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * prependTo - 前置到指定元素内部\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * before - 插入到指定元素前面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * after - 插入到指定元素后面\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  /**\n   * replaceAll - 替换掉指定元素\n   * @param selector {String|Node|NodeList|JQ}\n   * @return {JQ}\n   */\n  each({\n    appendTo: 'append',\n    prependTo: 'prepend',\n    before: 'insertBefore',\n    after: 'insertAfter',\n    replaceAll: 'replaceWith',\n  }, function (name, original) {\n    $$1.fn[name] = function (selector) {\n      $$1(selector)[original](this);\n      return this;\n    };\n  });\n\n  var dataNS = 'mduiElementDataStorage';\n\n  $$1.extend({\n    /**\n     * 在指定元素上存储数据，或从指定元素上读取数据\n     * @param elem 必须， DOM 元素\n     * @param key 必须，键名\n     * @param value 可选，值\n     */\n    data: function data(elem, key, value) {\n      var data = {};\n\n      if (value !== undefined) {\n        // 根据 key、value 设置值\n        data[key] = value;\n      } else if (isObjectLike(key)) {\n        // 根据键值对设置值\n        data = key;\n      } else if (key === undefined) {\n        // 获取所有值\n        var result = {};\n\n        each(elem.attributes, function (i, attribute) {\n          var name = attribute.name;\n\n          if (name.indexOf('data-') === 0) {\n            var prop = name.slice(5).replace(/-./g, function (u) { return u.charAt(1).toUpperCase(); });\n\n            result[prop] = attribute.value;\n          }\n        });\n\n        if (elem[dataNS]) {\n          each(elem[dataNS], function (k, v) {\n            result[k] = v;\n          });\n        }\n\n        return result;\n      } else if (elem[dataNS] && (key in elem[dataNS])) {\n        // 获取指定值\n        return elem[dataNS][key];\n      } else {\n        // 从 data- 中获取指定值\n        var dataKey = elem.getAttribute((\"data-\" + key));\n\n        if (dataKey) {\n          return dataKey;\n        }\n\n        return undefined;\n      }\n\n      // 设置值\n      if (!elem[dataNS]) {\n        elem[dataNS] = {};\n      }\n\n      each(data, function (k, v) {\n        elem[dataNS][k] = v;\n      });\n\n      return undefined;\n    },\n\n    /**\n     * 移除指定元素上存放的数据\n     * @param elem 必须，DOM 元素\n     * @param key 必须，键名\n     */\n    removeData: function removeData(elem, key) {\n      if (elem[dataNS] && elem[dataNS][key]) {\n        elem[dataNS][key] = null;\n        delete elem[dataNS][key];\n      }\n    },\n  });\n\n  $$1.fn.extend({\n    /**\n     * 在元素上读取或设置数据\n     * @param key 必须\n     * @param value\n     * @returns {*}\n     */\n    data: function data(key, value) {\n      if (value === undefined) {\n        if (isObjectLike(key)) {\n          // 同时设置多个值\n          return this.each(function (i, elem) {\n            $$1.data(elem, key);\n          });\n        }\n\n        if (this[0]) {\n          // 获取值\n          return $$1.data(this[0], key);\n        }\n\n        return undefined;\n      }\n\n      // 设置值\n      return this.each(function (i, elem) {\n        $$1.data(elem, key, value);\n      });\n    },\n\n    /**\n     * 移除元素上存储的数据\n     * @param key 必须\n     * @returns {*}\n     */\n    removeData: function removeData(key) {\n      return this.each(function (i, elem) {\n        $$1.removeData(elem, key);\n      });\n    },\n  });\n\n  !function(){!function(){try{return new e(\"test\"),!1}catch(e){}var e=function(e,n){n=n||{bubbles:!1,cancelable:!1};var t=document.createEvent(\"MouseEvent\");return t.initMouseEvent(e,n.bubbles,n.cancelable,window,0,0,0,0,0,!1,!1,!1,!1,0,null),t};e.prototype=Event.prototype,window.MouseEvent=e;}();}();\n\n  !function(){!function(){if(\"function\"==typeof window.CustomEvent){ return!1; }function t(t,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var e=document.createEvent(\"CustomEvent\");return e.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),e}t.prototype=window.Event.prototype,window.CustomEvent=t;}();}();\n\n// 存储事件\n  var handlers = {\n    // i: { // 元素ID\n    //   j: { // 事件ID\n    //     e: 事件名\n    //     fn: 事件处理函数\n    //     i: 事件ID\n    //     proxy:\n    //     sel: 选择器\n    //   }\n    // }\n  };\n\n// 元素ID\n  var mduiElementId = 1;\n\n  function fnFalse() {\n    return false;\n  }\n\n  /**\n   * 为元素赋予一个唯一的ID\n   * @param element\n   * @returns {number|*}\n   */\n  function getElementId(element) {\n    if (!element.mduiElementId) {\n      mduiElementId += 1;\n      element.mduiElementId = mduiElementId;\n    }\n\n    return element.mduiElementId;\n  }\n\n  /**\n   * 获取匹配的事件\n   * @param element\n   * @param eventName\n   * @param func\n   * @param selector\n   * @returns {Array}\n   */\n  function getHandlers(element, eventName, func, selector) {\n    return (handlers[getElementId(element)] || []).filter(function (handler) { return handler\n      && (!eventName || handler.e === eventName)\n      && (!func || handler.fn.toString() === func.toString())\n      && (!selector || handler.sel === selector); });\n  }\n\n  /**\n   * 添加事件监听\n   * @param element\n   * @param eventName\n   * @param func\n   * @param data\n   * @param selector\n   */\n  function add(element, eventName, func, data, selector) {\n    var elementId = getElementId(element);\n\n    if (!handlers[elementId]) {\n      handlers[elementId] = [];\n    }\n\n    // 传入 data.useCapture 来设置 useCapture: true\n    var useCapture = false;\n    if (isObjectLike(data) && data.useCapture) {\n      useCapture = true;\n    }\n\n    eventName.split(' ').forEach(function (event) {\n      var handler = {\n        e: event,\n        fn: func,\n        sel: selector,\n        i: handlers[elementId].length,\n      };\n\n      function callFn(e, elem) {\n        // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n        /* eslint no-underscore-dangle: 0 */\n        var result = func.apply(elem, e._detail === undefined ? [e] : [e].concat(e._detail));\n\n        if (result === false) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      }\n\n      function proxyfn(e) {\n        e._data = data;\n\n        if (selector) {\n          // 事件代理\n          $$1(element)\n            .find(selector)\n            .get()\n            .reverse()\n            .forEach(function (elem) {\n              if (elem === e.target || $$1.contains(elem, e.target)) {\n                callFn(e, elem);\n              }\n            });\n        } else {\n          // 不使用事件代理\n          callFn(e, element);\n        }\n      }\n\n      handler.proxy = proxyfn;\n      handlers[elementId].push(handler);\n      element.addEventListener(handler.e, proxyfn, useCapture);\n    });\n  }\n\n  /**\n   * 移除事件监听\n   * @param element\n   * @param eventName\n   * @param func\n   * @param selector\n   */\n  function remove(element, eventName, func, selector) {\n    (eventName || '').split(' ').forEach(function (event) {\n      getHandlers(element, event, func, selector).forEach(function (handler) {\n        delete handlers[getElementId(element)][handler.i];\n        element.removeEventListener(handler.e, handler.proxy, false);\n      });\n    });\n  }\n\n  $$1.fn.extend({\n    /**\n     * DOM 加载完毕后调用的函数\n     * @param callback\n     * @returns {ready}\n     */\n    ready: function ready(callback) {\n      if (/complete|loaded|interactive/.test(document.readyState) && document.body) {\n        callback($$1);\n      } else {\n        document.addEventListener('DOMContentLoaded', function () {\n          callback($$1);\n        }, false);\n      }\n\n      return this;\n    },\n\n    /**\n     * 绑定事件\n     *\n     * $().on({eventName: fn}, selector, data);\n     * $().on({eventName: fn}, selector)\n     * $().on({eventName: fn})\n     * $().on(eventName, selector, data, fn);\n     * $().on(eventName, selector, fn);\n     * $().on(eventName, data, fn);\n     * $().on(eventName, fn);\n     * $().on(eventName, false);\n     *\n     * @param eventName\n     * @param selector\n     * @param data\n     * @param callback\n     * @param one 是否是 one 方法，只在 JQ 内部使用\n     * @returns\n     */\n    on: function on(eventName, selector, data, callback, one) {\n      var self = this;\n\n      // 默认\n      // $().on(event, selector, data, callback)\n\n      // event 使用 事件:函数 键值对\n      // event = {\n      //   'event1': callback1,\n      //   'event2': callback2\n      // }\n      //\n      // $().on(event, selector, data)\n      if (eventName && !isString(eventName)) {\n        each(eventName, function (type, fn) {\n          self.on(type, selector, data, fn);\n        });\n\n        return self;\n      }\n\n      // selector 不存在\n      // $().on(event, data, callback)\n      if (!isString(selector) && !isFunction(callback) && callback !== false) {\n        callback = data;\n        data = selector;\n        selector = undefined;\n      }\n\n      // data 不存在\n      // $().on(event, callback)\n      if (isFunction(data) || data === false) {\n        callback = data;\n        data = undefined;\n      }\n\n      // callback 为 false\n      // $().on(event, false)\n      if (callback === false) {\n        callback = fnFalse;\n      }\n\n      if (one === 1) {\n        var origCallback = callback;\n        callback = function () {\n          self.off(eventName, selector, callback);\n          /* eslint prefer-rest-params: 0 */\n          return origCallback.apply(this, arguments);\n        };\n      }\n\n      return this.each(function () {\n        add(this, eventName, callback, data, selector);\n      });\n    },\n\n    /**\n     * 绑定事件，只触发一次\n     * @param eventName\n     * @param selector\n     * @param data\n     * @param callback\n     */\n    one: function one(eventName, selector, data, callback) {\n      var self = this;\n\n      if (!isString(eventName)) {\n        each(eventName, function (type, fn) {\n          type.split(' ').forEach(function (eName) {\n            self.on(eName, selector, data, fn, 1);\n          });\n        });\n      } else {\n        eventName.split(' ').forEach(function (eName) {\n          self.on(eName, selector, data, callback, 1);\n        });\n      }\n\n      return this;\n    },\n\n    /**\n     * 取消绑定事件\n     *\n     * $().off(eventName, selector);\n     * $().off(eventName, callback);\n     * $().off(eventName, false);\n     *\n     */\n    off: function off(eventName, selector, callback) {\n      var self = this;\n\n      // event 使用 事件:函数 键值对\n      // event = {\n      //   'event1': callback1,\n      //   'event2': callback2\n      // }\n      //\n      // $().off(event, selector)\n      if (eventName && !isString(eventName)) {\n        each(eventName, function (type, fn) {\n          self.off(type, selector, fn);\n        });\n\n        return self;\n      }\n\n      // selector 不存在\n      // $().off(event, callback)\n      if (!isString(selector) && !isFunction(callback) && callback !== false) {\n        callback = selector;\n        selector = undefined;\n      }\n\n      // callback 为 false\n      // $().off(event, false)\n      if (callback === false) {\n        callback = fnFalse;\n      }\n\n      return self.each(function () {\n        remove(this, eventName, callback, selector);\n      });\n    },\n\n    /**\n     * 触发一个事件\n     * @param eventName\n     * @param data\n     * @returns {*|JQ}\n     */\n    trigger: function trigger(eventName, data) {\n      var isMouseEvent = ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(eventName) > -1;\n      var evt;\n\n      if (isMouseEvent) {\n        // Note: MouseEvent 无法传入 detail 参数\n        evt = new MouseEvent(eventName, {\n          bubbles: true,\n          cancelable: true,\n        });\n      } else {\n        evt = new CustomEvent(eventName, {\n          detail: data,\n          bubbles: true,\n          cancelable: true,\n        });\n      }\n\n      evt._detail = data;\n\n      return this.each(function () {\n        this.dispatchEvent(evt);\n      });\n    },\n  });\n\n  var globalOptions = {};\n  var jsonpID = 0;\n\n// 全局事件名\n  var ajaxEvent = {\n    ajaxStart: 'start.mdui.ajax',\n    ajaxSuccess: 'success.mdui.ajax',\n    ajaxError: 'error.mdui.ajax',\n    ajaxComplete: 'complete.mdui.ajax',\n  };\n\n  /**\n   * 判断此请求方法是否通过查询字符串提交参数\n   * @param method 请求方法，大写\n   * @returns {boolean}\n   */\n  function isQueryStringData(method) {\n    return ['GET', 'HEAD'].indexOf(method) >= 0;\n  }\n\n  /**\n   * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n   * @param url\n   * @param query 参数 key=value\n   * @returns {string}\n   */\n  function appendQuery(url, query) {\n    return ((url + \"&\" + query)).replace(/[&?]{1,2}/, '?');\n  }\n\n  $$1.extend({\n\n    /**\n     * 为 ajax 请求设置全局配置参数\n     * @param options\n     */\n    ajaxSetup: function ajaxSetup(options) {\n      $$1.extend(globalOptions, options || {});\n    },\n\n    /**\n     * 发送 ajax 请求\n     * @param options\n     */\n    ajax: function ajax(options) {\n      // 配置参数\n      var defaults = {\n        // 请求方式\n        method: 'GET',\n        // 请求的数据，查询字符串或对象\n        data: false,\n        // 是否把数据转换为查询字符串发送，为 false 时不进行自动转换。\n        processData: true,\n        // 是否为异步请求\n        async: true,\n        // 是否从缓存中读取，只对 GET/HEAD 请求有效，dataType 为 jsonp 时为 false\n        cache: true,\n        // HTTP 访问认证的用户名\n        username: '',\n        // HTTP 访问认证的密码\n        password: '',\n        // 一个键值对，随着请求一起发送\n        headers: {},\n        // 设置 XHR 对象\n        xhrFields: {},\n        // 一个 HTTP 代码和函数的对象\n        statusCode: {},\n        // 预期服务器返回的数据类型 text、json、jsonp\n        dataType: 'text',\n        // jsonp 请求的回调函数名称\n        jsonp: 'callback',\n        // （string 或 Function）使用指定的回调函数名代替自动生成的回调函数名\n        jsonpCallback: function () {\n          jsonpID += 1;\n\n          return (\"mduijsonp_\" + (Date.now()) + \"_\" + jsonpID);\n        },\n        // 发送信息至服务器时内容编码类型\n        contentType: 'application/x-www-form-urlencoded',\n        // 设置请求超时时间（毫秒）\n        timeout: 0,\n        // 是否在 document 上触发全局 ajax 事件\n        global: true,\n        // beforeSend:    function (XMLHttpRequest) 请求发送前执行，返回 false 可取消本次 ajax 请求\n        // success:       function (data, textStatus, XMLHttpRequest) 请求成功时调用\n        // error:         function (XMLHttpRequest, textStatus) 请求失败时调用\n        // statusCode:    {404: function ()}\n        //                200-299之间的状态码表示成功，参数和 success 回调一样；其他状态码表示失败，参数和 error 回调一样\n        // complete:      function (XMLHttpRequest, textStatus) 请求完成后回调函数 (请求成功或失败之后均调用)\n      };\n\n      // 回调函数\n      var callbacks = [\n        'beforeSend',\n        'success',\n        'error',\n        'statusCode',\n        'complete' ];\n\n      // 是否已取消请求\n      var isCanceled = false;\n\n      // 保存全局配置\n      var globals = globalOptions;\n\n      // 事件参数\n      var eventParams = {};\n\n      // 合并全局参数到默认参数，全局回调函数不覆盖\n      each(globals, function (key, value) {\n        if (callbacks.indexOf(key) < 0) {\n          defaults[key] = value;\n        }\n      });\n\n      // 参数合并\n      options = $$1.extend({}, defaults, options);\n\n      /**\n       * 触发全局事件\n       * @param event string 事件名\n       * @param xhr XMLHttpRequest 事件参数\n       */\n      function triggerEvent(event, xhr) {\n        if (options.global) {\n          $$1(document).trigger(event, xhr);\n        }\n      }\n\n      /**\n       * 触发 XHR 回调和事件\n       * @param callback string 回调函数名称\n       * @param args\n       */\n      function triggerCallback(callback) {\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n        var result1;\n        var result2;\n\n        if (callback) {\n          // 全局回调\n          if (callback in globals) {\n            result1 = globals[callback].apply(globals, args);\n          }\n\n          // 自定义回调\n          if (options[callback]) {\n            result2 = options[callback].apply(options, args);\n          }\n\n          // beforeSend 回调返回 false 时取消 ajax 请求\n          if (callback === 'beforeSend' && (result1 === false || result2 === false)) {\n            isCanceled = true;\n          }\n        }\n      }\n\n      // 请求方式转为大写\n      var method = options.method.toUpperCase();\n\n      // 默认使用当前页面 URL\n      if (!options.url) {\n        options.url = window.location.toString();\n      }\n\n      // 需要发送的数据\n      // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n      var sendData;\n      if (\n        (isQueryStringData(method) || options.processData)\n        && options.data\n        && [ArrayBuffer, Blob, Document, FormData].indexOf(options.data.constructor) < 0\n      ) {\n        sendData = isString(options.data) ? options.data : $$1.param(options.data);\n      } else {\n        sendData = options.data;\n      }\n\n      // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n      if (isQueryStringData(method) && sendData) {\n        // 查询字符串拼接到 URL 中\n        options.url = appendQuery(options.url, sendData);\n        sendData = null;\n      }\n\n      // JSONP\n      if (options.dataType === 'jsonp') {\n        // URL 中添加自动生成的回调函数名\n        var callbackName = isFunction(options.jsonpCallback)\n          ? options.jsonpCallback()\n          : options.jsonpCallback;\n        var requestUrl = appendQuery(options.url, ((options.jsonp) + \"=\" + callbackName));\n\n        eventParams.options = options;\n\n        triggerEvent(ajaxEvent.ajaxStart, eventParams);\n        triggerCallback('beforeSend', null);\n\n        if (isCanceled) {\n          return undefined;\n        }\n\n        var abortTimeout;\n\n        // 创建 script\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n\n        // 创建 script 失败\n        script.onerror = function () {\n          if (abortTimeout) {\n            clearTimeout(abortTimeout);\n          }\n\n          triggerEvent(ajaxEvent.ajaxError, eventParams);\n          triggerCallback('error', null, 'scripterror');\n\n          triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n          triggerCallback('complete', null, 'scripterror');\n        };\n\n        script.src = requestUrl;\n\n        // 处理\n        window[callbackName] = function (data) {\n          if (abortTimeout) {\n            clearTimeout(abortTimeout);\n          }\n\n          eventParams.data = data;\n\n          triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n          triggerCallback('success', data, 'success', null);\n\n          $$1(script).remove();\n          script = null;\n          delete window[callbackName];\n        };\n\n        $$1('head').append(script);\n\n        if (options.timeout > 0) {\n          abortTimeout = setTimeout(function () {\n            $$1(script).remove();\n            script = null;\n\n            triggerEvent(ajaxEvent.ajaxError, eventParams);\n            triggerCallback('error', null, 'timeout');\n          }, options.timeout);\n        }\n\n        return undefined;\n      }\n\n      // GET/HEAD 请求的缓存处理\n      if (isQueryStringData(method) && !options.cache) {\n        options.url = appendQuery(options.url, (\"_=\" + (Date.now())));\n      }\n\n      // 创建 XHR\n      var xhr = new XMLHttpRequest();\n\n      xhr.open(method, options.url, options.async, options.username, options.password);\n\n      if (\n        options.contentType\n        || (\n          sendData\n          && !isQueryStringData(method)\n          && options.contentType !== false\n        )\n      ) {\n        xhr.setRequestHeader('Content-Type', options.contentType);\n      }\n\n      // 设置 Accept\n      if (options.dataType === 'json') {\n        xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n      }\n\n      // 添加 headers\n      if (options.headers) {\n        each(options.headers, function (key, value) {\n          xhr.setRequestHeader(key, value);\n        });\n      }\n\n      // 检查是否是跨域请求\n      if (options.crossDomain === undefined) {\n        options.crossDomain = /^([\\w-]+:)?\\/\\/([^/]+)/.test(options.url)\n          && RegExp.$2 !== window.location.host;\n      }\n\n      if (!options.crossDomain) {\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      if (options.xhrFields) {\n        each(options.xhrFields, function (key, value) {\n          xhr[key] = value;\n        });\n      }\n\n      eventParams.xhr = xhr;\n      eventParams.options = options;\n\n      var xhrTimeout;\n\n      xhr.onload = function () {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        // 包含成功或错误代码的字符串\n        var textStatus;\n\n        // AJAX 返回的 HTTP 响应码是否表示成功\n        var isHttpStatusSuccess = (xhr.status >= 200 && xhr.status < 300) || xhr.status === 0;\n\n        var responseData;\n\n        if (isHttpStatusSuccess) {\n          if (xhr.status === 204 || method === 'HEAD') {\n            textStatus = 'nocontent';\n          } else if (xhr.status === 304) {\n            textStatus = 'notmodified';\n          } else {\n            textStatus = 'success';\n          }\n\n          if (options.dataType === 'json') {\n            try {\n              responseData = JSON.parse(xhr.responseText);\n              eventParams.data = responseData;\n            } catch (err) {\n              textStatus = 'parsererror';\n\n              triggerEvent(ajaxEvent.ajaxError, eventParams);\n              triggerCallback('error', xhr, textStatus);\n            }\n\n            if (textStatus !== 'parsererror') {\n              triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n              triggerCallback('success', responseData, textStatus, xhr);\n            }\n          } else {\n            responseData = xhr.responseType === 'text' || xhr.responseType === ''\n              ? xhr.responseText\n              : xhr.response;\n            eventParams.data = responseData;\n\n            triggerEvent(ajaxEvent.ajaxSuccess, eventParams);\n            triggerCallback('success', responseData, textStatus, xhr);\n          }\n        } else {\n          textStatus = 'error';\n\n          triggerEvent(ajaxEvent.ajaxError, eventParams);\n          triggerCallback('error', xhr, textStatus);\n        }\n\n        // statusCode\n        each([globals.statusCode, options.statusCode], function (i, func) {\n          if (func && func[xhr.status]) {\n            if (isHttpStatusSuccess) {\n              func[xhr.status](responseData, textStatus, xhr);\n            } else {\n              func[xhr.status](xhr, textStatus);\n            }\n          }\n        });\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, textStatus);\n      };\n\n      xhr.onerror = function () {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvent.ajaxError, eventParams);\n        triggerCallback('error', xhr, xhr.statusText);\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, 'error');\n      };\n\n      xhr.onabort = function () {\n        var textStatus = 'abort';\n\n        if (xhrTimeout) {\n          textStatus = 'timeout';\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvent.ajaxError, eventParams);\n        triggerCallback('error', xhr, textStatus);\n\n        triggerEvent(ajaxEvent.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, textStatus);\n      };\n\n      // ajax start 回调\n      triggerEvent(ajaxEvent.ajaxStart, eventParams);\n      triggerCallback('beforeSend', xhr);\n\n      if (isCanceled) {\n        return xhr;\n      }\n\n      // Timeout\n      if (options.timeout > 0) {\n        xhrTimeout = setTimeout(function () {\n          xhr.abort();\n        }, options.timeout);\n      }\n\n      // 发送 XHR\n      xhr.send(sendData);\n\n      return xhr;\n    },\n  });\n\n// 监听全局事件\n//\n// 通过 $(document).on('success.mdui.ajax', function (event, params) {}) 调用时，包含两个参数\n// event: 事件对象\n// params: {\n//   xhr: XMLHttpRequest 对象\n//   options: ajax 请求的配置参数\n//   data: ajax 请求返回的数据\n// }\n\n// 全局 Ajax 事件快捷方法\n// $(document).ajaxStart(function (event, xhr, options) {})\n// $(document).ajaxSuccess(function (event, xhr, options, data) {})\n// $(document).ajaxError(function (event, xhr, options) {})\n// $(document).ajaxComplete(function (event, xhr, options) {})\n  each(ajaxEvent, function (name, eventName) {\n    $$1.fn[name] = function (fn) {\n      return this.on(eventName, function (e, params) {\n        fn(e, params.xhr, params.options, params.data);\n      });\n    };\n  });\n\n  return $$1;\n\n}());\n","/**\n * =============================================================================\n * ************   定义全局变量   ************\n * =============================================================================\n */\n\nvar $document = $(document);\nvar $window = $(window);\n\n/**\n * 队列 -- 当前队列的 api 和 jquery 不一样，所以不打包进 mdui.JQ 里\n */\nvar queue = {};\n(function () {\n  var queueData = [];\n\n  /**\n   * 写入队列\n   * @param queueName 对列名\n   * @param func 函数名，该参数为空时，返回所有队列\n   */\n  queue.queue = function (queueName, func) {\n    if (queueData[queueName] === undefined) {\n      queueData[queueName] = [];\n    }\n\n    if (func === undefined) {\n      return queueData[queueName];\n    }\n\n    queueData[queueName].push(func);\n  };\n\n  /**\n   * 从队列中移除第一个函数，并执行该函数\n   * @param queueName\n   */\n  queue.dequeue = function (queueName) {\n    if (queueData[queueName] !== undefined && queueData[queueName].length) {\n      (queueData[queueName].shift())();\n    }\n  };\n\n})();\n\n/**\n * touch 事件后的 500ms 内禁用 mousedown 事件\n *\n * 不支持触控的屏幕上事件顺序为 mousedown -> mouseup -> click\n * 支持触控的屏幕上事件顺序为 touchstart -> touchend -> mousedown -> mouseup -> click\n */\nvar TouchHandler = {\n  touches: 0,\n\n  /**\n   * 该事件是否被允许\n   * 在执行事件前调用该方法判断事件是否可以执行\n   * @param e\n   * @returns {boolean}\n   */\n  isAllow: function (e) {\n    var allow = true;\n\n    if (\n      TouchHandler.touches &&\n      [\n        'mousedown',\n        'mouseup',\n        'mousemove',\n        'click',\n        'mouseover',\n        'mouseout',\n        'mouseenter',\n        'mouseleave',\n      ].indexOf(e.type) > -1\n    ) {\n      // 触发了 touch 事件后阻止鼠标事件\n      allow = false;\n    }\n\n    return allow;\n  },\n\n  /**\n   * 在 touchstart 和 touchmove、touchend、touchcancel 事件中调用该方法注册事件\n   * @param e\n   */\n  register: function (e) {\n    if (e.type === 'touchstart') {\n      // 触发了 touch 事件\n      TouchHandler.touches += 1;\n    } else if (['touchmove', 'touchend', 'touchcancel'].indexOf(e.type) > -1) {\n      // touch 事件结束 500ms 后解除对鼠标事件的阻止\n      setTimeout(function () {\n        if (TouchHandler.touches) {\n          TouchHandler.touches -= 1;\n        }\n      }, 500);\n    }\n  },\n\n  start: 'touchstart mousedown',\n  move: 'touchmove mousemove',\n  end: 'touchend mouseup',\n  cancel: 'touchcancel mouseleave',\n  unlock: 'touchend touchmove touchcancel',\n};\n\n// 测试事件\n// 在每一个事件中都使用 TouchHandler.isAllow(e) 判断事件是否可执行\n// 在 touchstart 和 touchmove、touchend、touchcancel\n// (function () {\n//\n//   $document\n//     .on(TouchHandler.start, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       TouchHandler.register(e);\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.move, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.end, function (e) {\n//       if (!TouchHandler.isAllow(e)) {\n//         return;\n//       }\n//       console.log(e.type);\n//     })\n//     .on(TouchHandler.unlock, TouchHandler.register);\n// })();\n\n$(function () {\n  // 避免页面加载完后直接执行css动画\n  // https://css-tricks.com/transitions-only-after-page-load/\n\n  setTimeout(function () {\n    $('body').addClass('mdui-loaded');\n  }, 0);\n});\n","/**\n * =============================================================================\n * ************   MDUI 内部使用的函数   ************\n * =============================================================================\n */\n\n/**\n * 解析 DATA API 的参数\n * @param str\n * @returns {*}\n */\nvar parseOptions = function (str) {\n  var options = {};\n\n  if (str === null || !str) {\n    return options;\n  }\n\n  if (typeof str === 'object') {\n    return str;\n  }\n\n  /* jshint ignore:start */\n  var start = str.indexOf('{');\n  try {\n    options = (new Function('',\n      'var json = ' + str.substr(start) +\n      '; return JSON.parse(JSON.stringify(json));'))();\n  } catch (e) {\n  }\n  /* jshint ignore:end */\n\n  return options;\n};\n\n/**\n * 绑定组件的事件\n * @param eventName 事件名\n * @param pluginName 插件名\n * @param inst 插件实例\n * @param trigger 在该元素上触发\n * @param obj 事件参数\n */\nvar componentEvent = function (eventName, pluginName, inst, trigger, obj) {\n  if (!obj) {\n    obj = {};\n  }\n\n  obj.inst = inst;\n\n  var fullEventName = eventName + '.mdui.' + pluginName;\n\n  // jQuery 事件\n  if (typeof jQuery !== 'undefined') {\n    jQuery(trigger).trigger(fullEventName, obj);\n  }\n\n  // JQ 事件\n  $(trigger).trigger(fullEventName, obj);\n};\n","/**\n * =============================================================================\n * ************   开放的常用方法   ************\n * =============================================================================\n */\n\n$.fn.extend({\n\n  /**\n   * 执行强制重绘\n   */\n  reflow: function () {\n    return this.each(function () {\n      return this.clientLeft;\n    });\n  },\n\n  /**\n   * 设置 transition 时间\n   * @param duration\n   */\n  transition: function (duration) {\n    if (typeof duration !== 'string') {\n      duration = duration + 'ms';\n    }\n\n    return this.each(function () {\n      this.style.webkitTransitionDuration = duration;\n      this.style.transitionDuration = duration;\n    });\n  },\n\n  /**\n   * transition 动画结束回调\n   * @param callback\n   * @returns {transitionEnd}\n   */\n  transitionEnd: function (callback) {\n    var events = [\n        'webkitTransitionEnd',\n        'transitionend',\n      ];\n    var i;\n    var _this = this;\n\n    function fireCallBack(e) {\n      if (e.target !== this) {\n        return;\n      }\n\n      callback.call(this, e);\n\n      for (i = 0; i < events.length; i++) {\n        _this.off(events[i], fireCallBack);\n      }\n    }\n\n    if (callback) {\n      for (i = 0; i < events.length; i++) {\n        _this.on(events[i], fireCallBack);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * 设置 transform-origin 属性\n   * @param transformOrigin\n   */\n  transformOrigin: function (transformOrigin) {\n    return this.each(function () {\n      this.style.webkitTransformOrigin = transformOrigin;\n      this.style.transformOrigin = transformOrigin;\n    });\n  },\n\n  /**\n   * 设置 transform 属性\n   * @param transform\n   */\n  transform: function (transform) {\n    return this.each(function () {\n      this.style.webkitTransform = transform;\n      this.style.transform = transform;\n    });\n  },\n\n});\n\n$.extend({\n  /**\n   * 创建并显示遮罩\n   * @param zIndex 遮罩层的 z-index\n   */\n  showOverlay: function (zIndex) {\n    var $overlay = $('.mdui-overlay');\n\n    if ($overlay.length) {\n      $overlay.data('isDeleted', 0);\n\n      if (zIndex !== undefined) {\n        $overlay.css('z-index', zIndex);\n      }\n    } else {\n      if (zIndex === undefined) {\n        zIndex = 2000;\n      }\n\n      $overlay = $('<div class=\"mdui-overlay\">')\n        .appendTo(document.body)\n        .reflow()\n        .css('z-index', zIndex);\n    }\n\n    var level = $overlay.data('overlay-level') || 0;\n    return $overlay\n      .data('overlay-level', ++level)\n      .addClass('mdui-overlay-show');\n  },\n\n  /**\n   * 隐藏遮罩层\n   * @param force 是否强制隐藏遮罩\n   */\n  hideOverlay: function (force) {\n    var $overlay = $('.mdui-overlay');\n\n    if (!$overlay.length) {\n      return;\n    }\n\n    var level = force ? 1 : $overlay.data('overlay-level');\n    if (level > 1) {\n      $overlay.data('overlay-level', --level);\n      return;\n    }\n\n    $overlay\n      .data('overlay-level', 0)\n      .removeClass('mdui-overlay-show')\n      .data('isDeleted', 1)\n      .transitionEnd(function () {\n        if ($overlay.data('isDeleted')) {\n          $overlay.remove();\n        }\n      });\n  },\n\n  /**\n   * 锁定屏幕\n   */\n  lockScreen: function () {\n    var $body = $('body');\n\n    // 不直接把 body 设为 box-sizing: border-box，避免污染全局样式\n    var newBodyWidth = $body.width();\n\n    $body\n      .addClass('mdui-locked')\n      .width(newBodyWidth);\n\n    var level = $body.data('lockscreen-level') || 0;\n    $body.data('lockscreen-level', ++level);\n  },\n\n  /**\n   * 解除屏幕锁定\n   * @param force 是否强制解锁屏幕\n   */\n  unlockScreen: function (force) {\n    var $body = $('body');\n\n    var level = force ? 1 : $body.data('lockscreen-level');\n    if (level > 1) {\n      $body.data('lockscreen-level', --level);\n      return;\n    }\n\n    $body\n      .data('lockscreen-level', 0)\n      .removeClass('mdui-locked')\n      .width('');\n  },\n\n  /**\n   * 函数节流\n   * @param fn\n   * @param delay\n   * @returns {Function}\n   */\n  throttle: function (fn, delay) {\n    var timer = null;\n    if (!delay || delay < 16) {\n      delay = 16;\n    }\n\n    return function () {\n      var _this = this;\n      var args = arguments;\n\n      if (timer === null) {\n        timer = setTimeout(function () {\n          fn.apply(_this, args);\n          timer = null;\n        }, delay);\n      }\n    };\n  },\n});\n\n/**\n * 生成唯一 id\n * @param string name id的名称，若该名称对于的guid不存在，则生成新的guid并返回；若已存在，则返回原有guid\n * @returns {string}\n */\n(function () {\n  var GUID = {};\n\n  $.extend({\n    guid: function (name) {\n      if (typeof name !== 'undefined' && typeof GUID[name] !== 'undefined') {\n        return GUID[name];\n      }\n\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      }\n\n      var guid = s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n\n      if (typeof name !== 'undefined') {\n        GUID[name] = guid;\n      }\n\n      return guid;\n    },\n  });\n})();\n","/**\n * =============================================================================\n * ************   Mutation   ************\n * =============================================================================\n */\n\n(function () {\n  /**\n   * API 初始化代理, 当 DOM 突变再次执行代理的初始化函数. 使用方法:\n   *\n   * 1. 代理组件 API 执行初始化函数, selector 必须为字符串.\n   *    mdui.mutation(selector, apiInit);\n   *    mutation 会执行 $(selector).each(apiInit)\n   *\n   * 2. 突变时, 再次执行代理的初始化函数\n   *    mdui.mutation()        等价 $(document).mutation()\n   *    $(selector).mutation() 在 selector 节点内进行 API 初始化\n   *\n   * 原理:\n   *\n   *    mutation 执行了 $().data('mdui.mutation', [selector]).\n   *    当元素被重构时, 该数据会丢失, 由此判断是否突变.\n   *\n   * 提示:\n   *\n   *    类似 Drawer 可以使用委托事件完成.\n   *    类似 Collapse 需要知道 DOM 发生突变, 并再次进行初始化.\n   */\n  var entries = { };\n\n  function mutation(selector, apiInit, that, i, item) {\n    var $this = $(that);\n    var m = $this.data('mdui.mutation');\n\n    if (!m) {\n      m = [];\n      $this.data('mdui.mutation', m);\n    }\n\n    if (m.indexOf(selector) === -1) {\n      m.push(selector);\n      apiInit.call(that, i, item);\n    }\n  }\n\n  $.fn.extend({\n    mutation: function () {\n      return this.each(function (i, item) {\n        var $this = $(this);\n        $.each(entries, function (selector, apiInit) {\n          if ($this.is(selector)) {\n            mutation(selector, apiInit, $this[0], i, item);\n          }\n\n          $this.find(selector).each(function (i, item) {\n            mutation(selector, apiInit, this, i, item);\n          });\n        });\n      });\n    },\n  });\n\n  mdui.mutation = function (selector, apiInit) {\n    if (typeof selector !== 'string' || typeof apiInit !== 'function') {\n      $(document).mutation();\n      return;\n    }\n\n    entries[selector] = apiInit;\n    $(selector).each(function (i, item) {\n      mutation(selector, apiInit, this, i, item);\n    });\n  };\n\n})();\n","/**\n * =============================================================================\n * ************   Headroom.js   ************\n * =============================================================================\n */\n\nmdui.Headroom = (function () {\n\n  /**\n   * 默认参数\n   * @type {{}}\n   */\n  var DEFAULT = {\n    tolerance: 5,                                 // 滚动条滚动多少距离开始隐藏或显示元素，{down: num, up: num}，或数字\n    offset: 0,                                    // 在页面顶部多少距离内滚动不会隐藏元素\n    initialClass: 'mdui-headroom',                // 初始化时添加的类\n    pinnedClass: 'mdui-headroom-pinned-top',      // 元素固定时添加的类\n    unpinnedClass: 'mdui-headroom-unpinned-top',  // 元素隐藏时添加的类\n  };\n\n  /**\n   * Headroom\n   * @param selector\n   * @param opts\n   * @constructor\n   */\n  function Headroom(selector, opts) {\n    var _this = this;\n\n    _this.$headroom = $(selector).eq(0);\n    if (!_this.$headroom.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = _this.$headroom.data('mdui.headroom');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    // 数值转为 {down: bum, up: num}\n    var tolerance = _this.options.tolerance;\n    if (tolerance !== Object(tolerance)) {\n      _this.options.tolerance = {\n        down: tolerance,\n        up: tolerance,\n      };\n    }\n\n    _this._init();\n  }\n\n  /**\n   * 初始化\n   * @private\n   */\n  Headroom.prototype._init = function () {\n    var _this = this;\n\n    _this.state = 'pinned';\n    _this.$headroom\n      .addClass(_this.options.initialClass)\n      .removeClass(_this.options.pinnedClass + ' ' + _this.options.unpinnedClass);\n\n    _this.inited = false;\n    _this.lastScrollY = 0;\n\n    _this._attachEvent();\n  };\n\n  /**\n   * 监听滚动事件\n   * @private\n   */\n  Headroom.prototype._attachEvent = function () {\n    var _this = this;\n\n    if (!_this.inited) {\n      _this.lastScrollY = window.pageYOffset;\n      _this.inited = true;\n\n      $window.on('scroll', function () {\n        _this._scroll();\n      });\n    }\n  };\n\n  /**\n   * 滚动时的处理\n   * @private\n   */\n  Headroom.prototype._scroll = function () {\n    var _this = this;\n    _this.rafId = window.requestAnimationFrame(function () {\n      var currentScrollY = window.pageYOffset;\n      var direction = currentScrollY > _this.lastScrollY ? 'down' : 'up';\n      var toleranceExceeded =\n        Math.abs(currentScrollY - _this.lastScrollY) >=\n        _this.options.tolerance[direction];\n\n      if (\n        currentScrollY > _this.lastScrollY &&\n        currentScrollY >= _this.options.offset &&\n        toleranceExceeded) {\n        _this.unpin();\n      } else if (\n        (currentScrollY < _this.lastScrollY && toleranceExceeded) ||\n        currentScrollY <= _this.options.offset\n      ) {\n        _this.pin();\n      }\n\n      _this.lastScrollY = currentScrollY;\n    });\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    if (inst.state === 'pinning') {\n      inst.state = 'pinned';\n      componentEvent('pinned', 'headroom', inst, inst.$headroom);\n    }\n\n    if (inst.state === 'unpinning') {\n      inst.state = 'unpinned';\n      componentEvent('unpinned', 'headroom', inst, inst.$headroom);\n    }\n  };\n\n  /**\n   * 固定住\n   */\n  Headroom.prototype.pin = function () {\n    var _this = this;\n\n    if (\n      _this.state === 'pinning' ||\n      _this.state === 'pinned' ||\n      !_this.$headroom.hasClass(_this.options.initialClass)\n    ) {\n      return;\n    }\n\n    componentEvent('pin', 'headroom', _this, _this.$headroom);\n\n    _this.state = 'pinning';\n\n    _this.$headroom\n      .removeClass(_this.options.unpinnedClass)\n      .addClass(_this.options.pinnedClass)\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 不固定住\n   */\n  Headroom.prototype.unpin = function () {\n    var _this = this;\n\n    if (\n      _this.state === 'unpinning' ||\n      _this.state === 'unpinned' ||\n      !_this.$headroom.hasClass(_this.options.initialClass)\n    ) {\n      return;\n    }\n\n    componentEvent('unpin', 'headroom', _this, _this.$headroom);\n\n    _this.state = 'unpinning';\n\n    _this.$headroom\n      .removeClass(_this.options.pinnedClass)\n      .addClass(_this.options.unpinnedClass)\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 启用\n   */\n  Headroom.prototype.enable = function () {\n    var _this = this;\n\n    if (!_this.inited) {\n      _this._init();\n    }\n  };\n\n  /**\n   * 禁用\n   */\n  Headroom.prototype.disable = function () {\n    var _this = this;\n\n    if (_this.inited) {\n      _this.inited = false;\n      _this.$headroom\n        .removeClass([\n          _this.options.initialClass,\n          _this.options.pinnedClass,\n          _this.options.unpinnedClass,\n        ].join(' '));\n\n      $window.off('scroll', function () {\n        _this._scroll();\n      });\n\n      window.cancelAnimationFrame(_this.rafId);\n    }\n  };\n\n  /**\n   * 获取当前状态 pinning | pinned | unpinning | unpinned\n   */\n  Headroom.prototype.getState = function () {\n    return this.state;\n  };\n\n  return Headroom;\n\n})();\n","/**\n * =============================================================================\n * ************   Headroom 自定义属性 API   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-headroom]', function () {\n    var $this = $(this);\n    var options = parseOptions($this.attr('mdui-headroom'));\n\n    var inst = $this.data('mdui.headroom');\n    if (!inst) {\n      inst = new mdui.Headroom($this, options);\n      $this.data('mdui.headroom', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   供 Collapse、 Panel 调用的折叠内容块插件   ************\n * =============================================================================\n */\nvar CollapsePrivate = (function () {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    accordion: false,                             // 是否使用手风琴效果\n  };\n\n  /**\n   * 折叠内容块\n   * @param selector\n   * @param opts\n   * @param namespace\n   * @constructor\n   */\n  function Collapse(selector, opts, namespace) {\n    var _this = this;\n\n    // 命名空间\n    _this.ns = namespace;\n\n    // 类名\n    var classpPefix = 'mdui-' + _this.ns + '-item';\n    _this.class_item = classpPefix;\n    _this.class_item_open = classpPefix + '-open';\n    _this.class_header = classpPefix + '-header';\n    _this.class_body = classpPefix + '-body';\n\n    // 折叠面板元素\n    _this.$collapse = $(selector).eq(0);\n    if (!_this.$collapse.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = _this.$collapse.data('mdui.' + _this.ns);\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    _this.$collapse.on('click', '.' + _this.class_header, function () {\n      var $item = $(this).parent('.' + _this.class_item);\n      if (_this.$collapse.children($item).length) {\n        _this.toggle($item);\n      }\n    });\n\n    // 绑定关闭按钮\n    _this.$collapse.on('click', '[mdui-' + _this.ns + '-item-close]', function () {\n      var $item = $(this).parents('.' + _this.class_item).eq(0);\n      if (_this._isOpen($item)) {\n        _this.close($item);\n      }\n    });\n  }\n\n  /**\n   * 指定 item 是否处于打开状态\n   * @param $item\n   * @returns {boolean}\n   * @private\n   */\n  Collapse.prototype._isOpen = function ($item) {\n    return $item.hasClass(this.class_item_open);\n  };\n\n  /**\n   * 获取指定 item\n   * @param item\n   * @returns {*}\n   * @private\n   */\n  Collapse.prototype._getItem = function (item) {\n    var _this = this;\n\n    if (parseInt(item) === item) {\n      // item 是索引号\n      return _this.$collapse.children('.' + _this.class_item).eq(item);\n    }\n\n    return $(item).eq(0);\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   * @param $content\n   * @param $item\n   */\n  var transitionEnd = function (inst, $content, $item) {\n    if (inst._isOpen($item)) {\n      $content\n        .transition(0)\n        .height('auto')\n        .reflow()\n        .transition('');\n\n      componentEvent('opened', inst.ns, inst, $item[0]);\n    } else {\n      $content.height('');\n\n      componentEvent('closed', inst.ns, inst, $item[0]);\n    }\n  };\n\n  /**\n   * 打开指定面板项\n   * @param item 面板项的索引号或 DOM 元素或 CSS 选择器\n   */\n  Collapse.prototype.open = function (item) {\n    var _this = this;\n    var $item = _this._getItem(item);\n\n    if (_this._isOpen($item)) {\n      return;\n    }\n\n    // 关闭其他项\n    if (_this.options.accordion) {\n      _this.$collapse.children('.' + _this.class_item_open).each(function () {\n        var $tmpItem = $(this);\n\n        if ($tmpItem !== $item) {\n          _this.close($tmpItem);\n        }\n      });\n    }\n\n    var $content = $item.children('.' + _this.class_body);\n\n    $content\n      .height($content[0].scrollHeight)\n      .transitionEnd(function () {\n        transitionEnd(_this, $content, $item);\n      });\n\n    componentEvent('open', _this.ns, _this, $item[0]);\n\n    $item.addClass(_this.class_item_open);\n  };\n\n  /**\n   * 关闭指定项\n   * @param item 面板项的索引号或 DOM 元素或 CSS 选择器\n   */\n  Collapse.prototype.close = function (item) {\n    var _this = this;\n    var $item = _this._getItem(item);\n\n    if (!_this._isOpen($item)) {\n      return;\n    }\n\n    var $content = $item.children('.' + _this.class_body);\n\n    componentEvent('close', _this.ns, _this, $item[0]);\n\n    $item.removeClass(_this.class_item_open);\n\n    $content\n      .transition(0)\n      .height($content[0].scrollHeight)\n      .reflow()\n      .transition('')\n      .height('')\n      .transitionEnd(function () {\n        transitionEnd(_this, $content, $item);\n      });\n  };\n\n  /**\n   * 切换指定项的状态\n   * @param item 面板项的索引号或 DOM 元素或 CSS 选择器或 JQ 对象\n   */\n  Collapse.prototype.toggle = function (item) {\n    var _this = this;\n    var $item = _this._getItem(item);\n\n    if (_this._isOpen($item)) {\n      _this.close($item);\n    } else {\n      _this.open($item);\n    }\n  };\n\n  /**\n   * 打开所有项\n   */\n  Collapse.prototype.openAll = function () {\n    var _this = this;\n\n    _this.$collapse.children('.' + _this.class_item).each(function () {\n      var $tmpItem = $(this);\n\n      if (!_this._isOpen($tmpItem)) {\n        _this.open($tmpItem);\n      }\n    });\n  };\n\n  /**\n   * 关闭所有项\n   */\n  Collapse.prototype.closeAll = function () {\n    var _this = this;\n\n    _this.$collapse.children('.' + _this.class_item).each(function () {\n      var $tmpItem = $(this);\n\n      if (_this._isOpen($tmpItem)) {\n        _this.close($tmpItem);\n      }\n    });\n  };\n\n  return Collapse;\n})();\n\n/**\n * =============================================================================\n * ************   Collapse 折叠内容块插件   ************\n * =============================================================================\n */\nmdui.Collapse = (function () {\n\n  function Collapse(selector, opts) {\n    return new CollapsePrivate(selector, opts, 'collapse');\n  }\n\n  return Collapse;\n})();\n","  /* jshint ignore:start */\n  mdui.JQ = $;\n  return mdui;\n})));\n/* jshint ignore:end */\n","/**\n * =============================================================================\n * ************   Collapse 自定义属性   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-collapse]', function () {\n    var $target = $(this);\n\n    var inst = $target.data('mdui.collapse');\n    if (!inst) {\n      var options = parseOptions($target.attr('mdui-collapse'));\n      inst = new mdui.Collapse($target, options);\n      $target.data('mdui.collapse', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Table 表格   ************\n * =============================================================================\n */\n\n(function () {\n\n  /**\n   * 生成 checkbox 的 HTML 结构\n   * @param tag\n   * @returns {string}\n   */\n  var checkboxHTML = function (tag) {\n    return '<' + tag + ' class=\"mdui-table-cell-checkbox\">' +\n             '<label class=\"mdui-checkbox\">' +\n               '<input type=\"checkbox\"/>' +\n               '<i class=\"mdui-checkbox-icon\"></i>' +\n             '</label>' +\n           '</' + tag + '>';\n  };\n\n  /**\n   * Table 表格\n   * @param selector\n   * @constructor\n   */\n  function Table(selector) {\n    var _this = this;\n\n    _this.$table = $(selector).eq(0);\n\n    if (!_this.$table.length) {\n      return;\n    }\n\n    _this.init();\n  }\n\n  /**\n   * 初始化\n   */\n  Table.prototype.init = function () {\n    var _this = this;\n\n    _this.$thRow = _this.$table.find('thead tr');\n    _this.$tdRows = _this.$table.find('tbody tr');\n    _this.$tdCheckboxs = $();\n    _this.selectable = _this.$table.hasClass('mdui-table-selectable');\n    _this.selectedRow = 0;\n\n    _this._updateThCheckbox();\n    _this._updateTdCheckbox();\n    _this._updateNumericCol();\n  };\n\n  /**\n   * 更新表格行的 checkbox\n   */\n  Table.prototype._updateTdCheckbox = function () {\n    var _this = this;\n\n    _this.$tdRows.each(function () {\n      var $tdRow = $(this);\n\n      // 移除旧的 checkbox\n      $tdRow.find('.mdui-table-cell-checkbox').remove();\n\n      if (!_this.selectable) {\n        return;\n      }\n\n      // 创建 DOM\n      var $checkbox = $(checkboxHTML('td'))\n        .prependTo($tdRow)\n        .find('input[type=\"checkbox\"]');\n\n      // 默认选中的行\n      if ($tdRow.hasClass('mdui-table-row-selected')) {\n        $checkbox[0].checked = true;\n        _this.selectedRow++;\n      }\n\n      // 所有行都选中后，选中表头；否则，不选中表头\n      _this.$thCheckbox[0].checked = _this.selectedRow === _this.$tdRows.length;\n\n      // 绑定事件\n      $checkbox.on('change', function () {\n        if ($checkbox[0].checked) {\n          $tdRow.addClass('mdui-table-row-selected');\n          _this.selectedRow++;\n        } else {\n          $tdRow.removeClass('mdui-table-row-selected');\n          _this.selectedRow--;\n        }\n\n        // 所有行都选中后，选中表头；否则，不选中表头\n        _this.$thCheckbox[0].checked = _this.selectedRow === _this.$tdRows.length;\n      });\n\n      _this.$tdCheckboxs = _this.$tdCheckboxs.add($checkbox);\n    });\n  };\n\n  /**\n   * 更新表头的 checkbox\n   */\n  Table.prototype._updateThCheckbox = function () {\n    var _this = this;\n\n    // 移除旧的 checkbox\n    _this.$thRow.find('.mdui-table-cell-checkbox').remove();\n\n    if (!_this.selectable) {\n      return;\n    }\n\n    _this.$thCheckbox = $(checkboxHTML('th'))\n      .prependTo(_this.$thRow)\n      .find('input[type=\"checkbox\"]')\n      .on('change', function () {\n\n        var isCheckedAll = _this.$thCheckbox[0].checked;\n        _this.selectedRow = isCheckedAll ? _this.$tdRows.length : 0;\n\n        _this.$tdCheckboxs.each(function (i, checkbox) {\n          checkbox.checked = isCheckedAll;\n        });\n\n        _this.$tdRows.each(function (i, row) {\n          $(row)[isCheckedAll ? 'addClass' : 'removeClass']('mdui-table-row-selected');\n        });\n\n      });\n  };\n\n  /**\n   * 更新数值列\n   */\n  Table.prototype._updateNumericCol = function () {\n    var _this = this;\n    var $th;\n    var $tdRow;\n\n    _this.$thRow.find('th').each(function (i, th) {\n      $th = $(th);\n\n      _this.$tdRows.each(function () {\n        $tdRow = $(this);\n        var method = $th.hasClass('mdui-table-col-numeric') ? 'addClass' : 'removeClass';\n        $tdRow.find('td').eq(i)[method]('mdui-table-col-numeric');\n      });\n    });\n  };\n\n  /**\n   * 初始化表格\n   */\n  mdui.mutation('.mdui-table', function () {\n    var $table = $(this);\n    if (!$table.data('mdui.table')) {\n      $table.data('mdui.table', new Table($table));\n    }\n  });\n\n  /**\n   * 更新表格\n   */\n  mdui.updateTables = function () {\n    $(arguments.length ? arguments[0] : '.mdui-table').each(function () {\n      var $table = $(this);\n      var inst = $table.data('mdui.table');\n\n      if (inst) {\n        inst.init();\n      } else {\n        $table.data('mdui.table', new Table($table));\n      }\n    });\n  };\n\n})();\n","/**\n * =============================================================================\n * ************   涟漪   ************\n * =============================================================================\n *\n * Inspired by https://github.com/nolimits4web/Framework7/blob/master/src/js/fast-clicks.js\n * https://github.com/nolimits4web/Framework7/blob/master/LICENSE\n *\n * Inspired by https://github.com/fians/Waves\n */\n\n(function () {\n\n  var Ripple = {\n\n    /**\n     * 延时，避免手指滑动时也触发涟漪（单位：毫秒）\n     */\n    delay: 200,\n\n    /**\n     * 显示涟漪动画\n     * @param e\n     * @param $ripple\n     */\n    show: function (e, $ripple) {\n\n      // 鼠标右键不产生涟漪\n      if (e.button === 2) {\n        return;\n      }\n\n      // 点击位置坐标\n      var tmp;\n      if ('touches' in e && e.touches.length) {\n        tmp = e.touches[0];\n      } else {\n        tmp = e;\n      }\n\n      var touchStartX = tmp.pageX;\n      var touchStartY = tmp.pageY;\n\n      // 涟漪位置\n      var offset = $ripple.offset();\n      var center = {\n        x: touchStartX - offset.left,\n        y: touchStartY - offset.top,\n      };\n\n      var height = $ripple.innerHeight();\n      var width = $ripple.innerWidth();\n      var diameter = Math.max(\n        Math.pow((Math.pow(height, 2) + Math.pow(width, 2)), 0.5), 48\n      );\n\n      // 涟漪扩散动画\n      var translate =\n        'translate3d(' + (-center.x + width / 2) + 'px, ' + (-center.y + height / 2) + 'px, 0) ' +\n        'scale(1)';\n\n      // 涟漪的 DOM 结构\n      $('<div class=\"mdui-ripple-wave\" style=\"' +\n        'width: ' + diameter + 'px; ' +\n        'height: ' + diameter + 'px; ' +\n        'margin-top:-' + diameter / 2 + 'px; ' +\n        'margin-left:-' + diameter / 2 + 'px; ' +\n        'left:' + center.x + 'px; ' +\n        'top:' + center.y + 'px;\">' +\n        '</div>')\n\n        // 缓存动画效果\n        .data('translate', translate)\n\n        .prependTo($ripple)\n        .reflow()\n        .transform(translate);\n    },\n\n    /**\n     * 隐藏涟漪动画\n     */\n    hide: function (e, element) {\n      var $ripple = $(element || this);\n\n      $ripple.children('.mdui-ripple-wave').each(function () {\n        removeRipple($(this));\n      });\n\n      $ripple.off('touchmove touchend touchcancel mousemove mouseup mouseleave', Ripple.hide);\n    },\n  };\n\n  /**\n   * 隐藏并移除涟漪\n   * @param $wave\n   */\n  function removeRipple($wave) {\n    if (!$wave.length || $wave.data('isRemoved')) {\n      return;\n    }\n\n    $wave.data('isRemoved', true);\n\n    var removeTimeout = setTimeout(function () {\n      $wave.remove();\n    }, 400);\n\n    var translate = $wave.data('translate');\n\n    $wave\n      .addClass('mdui-ripple-wave-fill')\n      .transform(translate.replace('scale(1)', 'scale(1.01)'))\n      .transitionEnd(function () {\n        clearTimeout(removeTimeout);\n\n        $wave\n          .addClass('mdui-ripple-wave-out')\n          .transform(translate.replace('scale(1)', 'scale(1.01)'));\n\n        removeTimeout = setTimeout(function () {\n          $wave.remove();\n        }, 700);\n\n        setTimeout(function () {\n          $wave.transitionEnd(function () {\n            clearTimeout(removeTimeout);\n            $wave.remove();\n          });\n        }, 0);\n      });\n  }\n\n  /**\n   * 显示涟漪，并绑定 touchend 等事件\n   * @param e\n   */\n  function showRipple(e) {\n    if (!TouchHandler.isAllow(e)) {\n      return;\n    }\n\n    TouchHandler.register(e);\n\n    // Chrome 59 点击滚动条时，会在 document 上触发事件\n    if (e.target === document) {\n      return;\n    }\n\n    var $ripple;\n    var $target = $(e.target);\n\n    // 获取含 .mdui-ripple 类的元素\n    if ($target.hasClass('mdui-ripple')) {\n      $ripple = $target;\n    } else {\n      $ripple = $target.parents('.mdui-ripple').eq(0);\n    }\n\n    if ($ripple.length) {\n\n      // 禁用状态的元素上不产生涟漪效果\n      if ($ripple[0].disabled || $ripple.attr('disabled') !== null) {\n        return;\n      }\n\n      if (e.type === 'touchstart') {\n        var hidden = false;\n\n        // toucstart 触发指定时间后开始涟漪动画\n        var timer = setTimeout(function () {\n          timer = null;\n          Ripple.show(e, $ripple);\n        }, Ripple.delay);\n\n        var hideRipple = function (hideEvent) {\n          // 如果手指没有移动，且涟漪动画还没有开始，则开始涟漪动画\n          if (timer) {\n            clearTimeout(timer);\n            timer = null;\n            Ripple.show(e, $ripple);\n          }\n\n          if (!hidden) {\n            hidden = true;\n            Ripple.hide(hideEvent, $ripple);\n          }\n        };\n\n        // 手指移动后，移除涟漪动画\n        var touchMove = function (moveEvent) {\n          if (timer) {\n            clearTimeout(timer);\n            timer = null;\n          }\n\n          hideRipple(moveEvent);\n        };\n\n        $ripple\n          .on('touchmove', touchMove)\n          .on('touchend touchcancel', hideRipple);\n\n      } else {\n        Ripple.show(e, $ripple);\n        $ripple.on('touchmove touchend touchcancel mousemove mouseup mouseleave', Ripple.hide);\n      }\n    }\n  }\n\n  // 初始化绑定的事件\n  $document\n    .on(TouchHandler.start, showRipple)\n    .on(TouchHandler.unlock, TouchHandler.register);\n})();\n","/**\n * =============================================================================\n * ************   Text Field 文本框   ************\n * =============================================================================\n */\n\n(function () {\n\n  var getProp = function (obj, prop) {\n    return (\n      typeof obj === 'object' &&\n      obj !== null &&\n      obj[prop] !== undefined &&\n      obj[prop]\n    ) ? obj[prop] : false;\n  };\n\n  /**\n   * 输入框事件\n   * @param e\n   */\n  var inputEvent = function (e) {\n    var input = e.target;\n    var $input = $(input);\n    var event = e.type;\n    var value = $input.val();\n\n    // reInit 为 true 时，需要重新初始化文本框\n    var reInit = getProp(e.detail, 'reInit');\n\n    // domLoadedEvent 为 true 时，为 DOM 加载完毕后自动触发的事件\n    var domLoadedEvent = getProp(e.detail, 'domLoadedEvent');\n\n    // 文本框类型\n    var type = $input.attr('type') || '';\n    if (['checkbox', 'button', 'submit', 'range', 'radio', 'image'].indexOf(type) >= 0) {\n      return;\n    }\n\n    var $textField = $input.parent('.mdui-textfield');\n\n    // 输入框是否聚焦\n    if (event === 'focus') {\n      $textField.addClass('mdui-textfield-focus');\n    }\n\n    if (event === 'blur') {\n      $textField.removeClass('mdui-textfield-focus');\n    }\n\n    // 输入框是否为空\n    if (event === 'blur' || event === 'input') {\n      $textField[(value && value !== '') ? 'addClass' : 'removeClass']('mdui-textfield-not-empty');\n    }\n\n    // 输入框是否禁用\n    $textField[input.disabled ? 'addClass' : 'removeClass']('mdui-textfield-disabled');\n\n    // 表单验证\n    if ((event === 'input' || event === 'blur') && !domLoadedEvent) {\n      if (input.validity) {\n        var method = input.validity.valid ? 'removeClass' : 'addClass';\n        $textField[method]('mdui-textfield-invalid-html5');\n      }\n    }\n\n    // textarea 高度自动调整\n    if (e.target.nodeName.toLowerCase() === 'textarea') {\n\n      // IE bug：textarea 的值仅为多个换行，不含其他内容时，textarea 的高度不准确\n      //         此时，在计算高度前，在值的开头加入一个空格，计算完后，移除空格\n      var inputValue = $input.val();\n      var hasExtraSpace = false;\n      if (inputValue.replace(/[\\r\\n]/g, '') === '') {\n        $input.val(' ' + inputValue);\n        hasExtraSpace = true;\n      }\n\n      // 设置 textarea 高度\n      $input.height('');\n      var height = $input.height();\n      var scrollHeight = input.scrollHeight;\n\n      if (scrollHeight > height) {\n        $input.height(scrollHeight);\n      }\n\n      // 计算完，还原 textarea 的值\n      if (hasExtraSpace) {\n        $input.val(inputValue);\n      }\n    }\n\n    // 实时字数统计\n    if (reInit) {\n      $textField\n        .find('.mdui-textfield-counter')\n        .remove();\n    }\n\n    var maxlength = $input.attr('maxlength');\n    if (maxlength) {\n      if (reInit || domLoadedEvent) {\n        $('<div class=\"mdui-textfield-counter\">' +\n            '<span class=\"mdui-textfield-counter-inputed\"></span> / ' + maxlength +\n          '</div>').appendTo($textField);\n      }\n\n      $textField.find('.mdui-textfield-counter-inputed').text(value.length.toString());\n    }\n\n    // 含 帮助文本、错误提示、字数统计 时，增加文本框底部内边距\n    if (\n      $textField.find('.mdui-textfield-helper').length ||\n      $textField.find('.mdui-textfield-error').length ||\n      maxlength\n    ) {\n      $textField.addClass('mdui-textfield-has-bottom');\n    }\n  };\n\n  // 绑定事件\n  $document.on('input focus blur', '.mdui-textfield-input', { useCapture: true }, inputEvent);\n\n  // 可展开文本框展开\n  $document.on('click', '.mdui-textfield-expandable .mdui-textfield-icon', function () {\n    $(this)\n\n      // 展开文本框\n      .parents('.mdui-textfield')\n      .addClass('mdui-textfield-expanded')\n\n      // 聚焦到输入框\n      .find('.mdui-textfield-input')[0].focus();\n  });\n\n  // 可展开文本框关闭\n  $document.on('click', '.mdui-textfield-expanded .mdui-textfield-close', function () {\n    $(this)\n\n      // 关闭文本框\n      .parents('.mdui-textfield')\n      .removeClass('mdui-textfield-expanded')\n\n      // 清空输入框\n      .find('.mdui-textfield-input')\n      .val('');\n  });\n\n  /**\n   * 通过 JS 更新了表单内容，需要重新进行表单处理\n   * @param- 如果传入了 .mdui-textfield 所在的 DOM 元素，则更新该文本框；否则，更新所有文本框\n   */\n  mdui.updateTextFields = function () {\n    $(arguments.length ? arguments[0] : '.mdui-textfield').each(function () {\n      $(this)\n        .find('.mdui-textfield-input')\n        .trigger('input', {\n          reInit: true,\n        });\n    });\n  };\n})();\n\n$(function () {\n  /**\n   * 初始化文本框\n   */\n  mdui.mutation('.mdui-textfield', function () {\n    $(this)\n      .find('.mdui-textfield-input')\n      .trigger('input', {\n        domLoadedEvent: true,\n      });\n  });\n});\n","/**\n * =============================================================================\n * ************   Slider 滑块   ************\n * =============================================================================\n */\n\n(function () {\n\n  /**\n   * 滑块的值变更后修改滑块样式\n   * @param $slider\n   */\n  var updateValueStyle = function ($slider) {\n    var data = $slider.data();\n\n    var $track = data.$track;\n    var $fill = data.$fill;\n    var $thumb = data.$thumb;\n    var $input = data.$input;\n    var min = data.min;\n    var max = data.max;\n    var isDisabled = data.disabled;\n    var isDiscrete = data.discrete;\n    var $thumbText = data.$thumbText;\n    var value = $input.val();\n    var percent = (value - min) / (max - min) * 100;\n\n    $fill.width(percent + '%');\n    $track.width((100 - percent) + '%');\n\n    if (isDisabled) {\n      $fill.css('padding-right', '6px');\n      $track.css('padding-left', '6px');\n    }\n\n    $thumb.css('left', percent + '%');\n\n    if (isDiscrete) {\n      $thumbText.text(value);\n    }\n\n    $slider[parseFloat(percent) === 0 ? 'addClass' : 'removeClass']('mdui-slider-zero');\n  };\n\n  /**\n   * 重新初始化\n   * @param $slider\n   */\n  var reInit = function ($slider) {\n    var $track = $('<div class=\"mdui-slider-track\"></div>');\n    var $fill = $('<div class=\"mdui-slider-fill\"></div>');\n    var $thumb = $('<div class=\"mdui-slider-thumb\"></div>');\n    var $input = $slider.find('input[type=\"range\"]');\n\n    // 禁用状态\n    var isDisabled = $input[0].disabled;\n    $slider[isDisabled ? 'addClass' : 'removeClass']('mdui-slider-disabled');\n\n    // 重新填充 HTML\n    $slider.find('.mdui-slider-track').remove();\n    $slider.find('.mdui-slider-fill').remove();\n    $slider.find('.mdui-slider-thumb').remove();\n    $slider.append($track).append($fill).append($thumb);\n\n    // 间续型滑块\n    var isDiscrete = $slider.hasClass('mdui-slider-discrete');\n\n    var $thumbText;\n    if (isDiscrete) {\n      $thumbText = $('<span></span>');\n      $thumb.empty().append($thumbText);\n    }\n\n    $slider.data({\n      $track: $track,\n      $fill: $fill,\n      $thumb: $thumb,\n      $input: $input,\n      min: $input.attr('min'),    // 滑块最小值\n      max: $input.attr('max'),    // 滑块最大值\n      disabled: isDisabled,       // 是否禁用状态\n      discrete: isDiscrete,       // 是否是间续型滑块\n      $thumbText: $thumbText,      // 间续型滑块的数值\n    });\n\n    // 设置默认值\n    updateValueStyle($slider);\n  };\n\n  var rangeSelector = '.mdui-slider input[type=\"range\"]';\n\n  $document\n\n    // 滑动滑块事件\n    .on('input change', rangeSelector, function () {\n      var $slider = $(this).parent();\n      updateValueStyle($slider);\n    })\n\n    // 开始触摸滑块事件\n    .on(TouchHandler.start, rangeSelector, function (e) {\n      if (!TouchHandler.isAllow(e)) {\n        return;\n      }\n\n      TouchHandler.register(e);\n\n      if (!this.disabled) {\n        var $slider = $(this).parent();\n        $slider.addClass('mdui-slider-focus');\n      }\n    })\n\n    // 结束触摸滑块事件\n    .on(TouchHandler.end, rangeSelector, function (e) {\n      if (!TouchHandler.isAllow(e)) {\n        return;\n      }\n\n      if (!this.disabled) {\n        var $slider = $(this).parent();\n        $slider.removeClass('mdui-slider-focus');\n      }\n    })\n\n    .on(TouchHandler.unlock, rangeSelector, TouchHandler.register);\n\n  /**\n   * 重新初始化滑块（强制重新初始化）\n   */\n  mdui.updateSliders = function () {\n    $(arguments.length ? arguments[0] : '.mdui-slider').each(function () {\n      reInit($(this));\n    });\n  };\n\n  $(function () {\n    /**\n     * 页面加载完后自动初始化（未初始化时，可以调用该方法初始化）\n     */\n    mdui.mutation('.mdui-slider', function () {\n      reInit($(this));\n    });\n  });\n})();\n","/**\n * =============================================================================\n * ************   Fab 浮动操作按钮   ************\n * =============================================================================\n */\n\nmdui.Fab = (function () {\n\n  /**\n   * 默认参数\n   * @type {{}}\n   */\n  var DEFAULT = {\n    trigger: 'hover',      // 触发方式 ['hover', 'click']\n  };\n\n  /**\n   * 浮动操作按钮实例\n   * @param selector 选择器或 HTML 字符串或 DOM 元素或 JQ 对象\n   * @param opts\n   * @constructor\n   */\n  function Fab(selector, opts) {\n    var _this = this;\n\n    _this.$fab = $(selector).eq(0);\n    if (!_this.$fab.length) {\n      return;\n    }\n\n    // 已通过 data 属性实例化过，不再重复实例化\n    var oldInst = _this.$fab.data('mdui.fab');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n    _this.state = 'closed';\n\n    _this.$btn = _this.$fab.find('.mdui-fab');\n    _this.$dial = _this.$fab.find('.mdui-fab-dial');\n    _this.$dialBtns = _this.$dial.find('.mdui-fab');\n\n    if (_this.options.trigger === 'hover') {\n      _this.$btn\n        .on('touchstart mouseenter', function () {\n          _this.open();\n        });\n\n      _this.$fab\n        .on('mouseleave', function () {\n          _this.close();\n        });\n    }\n\n    if (_this.options.trigger === 'click') {\n      _this.$btn\n        .on(TouchHandler.start, function () {\n          _this.open();\n        });\n    }\n\n    // 触摸屏幕其他地方关闭快速拨号\n    $document.on(TouchHandler.start, function (e) {\n      if (!$(e.target).parents('.mdui-fab-wrapper').length) {\n        _this.close();\n      }\n    });\n  }\n\n  /**\n   * 打开菜单\n   */\n  Fab.prototype.open = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    // 为菜单中的按钮添加不同的 transition-delay\n    _this.$dialBtns.each(function (index, btn) {\n      btn.style['transition-delay'] = btn.style['-webkit-transition-delay'] =\n        15 * (_this.$dialBtns.length - index) + 'ms';\n    });\n\n    _this.$dial\n      .css('height', 'auto')\n      .addClass('mdui-fab-dial-show');\n\n    // 如果按钮中存在 .mdui-fab-opened 的图标，则进行图标切换\n    if (_this.$btn.find('.mdui-fab-opened').length) {\n      _this.$btn.addClass('mdui-fab-opened');\n    }\n\n    _this.state = 'opening';\n    componentEvent('open', 'fab', _this, _this.$fab);\n\n    // 打开顺序为从下到上逐个打开，最上面的打开后才表示动画完成\n    _this.$dialBtns.eq(0).transitionEnd(function () {\n      if (_this.$btn.hasClass('mdui-fab-opened')) {\n        _this.state = 'opened';\n        componentEvent('opened', 'fab', _this, _this.$fab);\n      }\n    });\n  };\n\n  /**\n   * 关闭菜单\n   */\n  Fab.prototype.close = function () {\n    var _this = this;\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    // 为菜单中的按钮添加不同的 transition-delay\n    _this.$dialBtns.each(function (index, btn) {\n      btn.style['transition-delay'] = btn.style['-webkit-transition-delay'] = 15 * index + 'ms';\n    });\n\n    _this.$dial.removeClass('mdui-fab-dial-show');\n    _this.$btn.removeClass('mdui-fab-opened');\n    _this.state = 'closing';\n    componentEvent('close', 'fab', _this, _this.$fab);\n\n    // 从上往下依次关闭，最后一个关闭后才表示动画完成\n    _this.$dialBtns.eq(-1).transitionEnd(function () {\n      if (!_this.$btn.hasClass('mdui-fab-opened')) {\n        _this.state = 'closed';\n        componentEvent('closed', 'fab', _this, _this.$fab);\n        _this.$dial.css('height', 0);\n      }\n    });\n  };\n\n  /**\n   * 切换菜单的打开状态\n   */\n  Fab.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  /**\n   * 获取当前菜单状态\n   * @returns {'opening'|'opened'|'closing'|'closed'}\n   */\n  Fab.prototype.getState = function () {\n    return this.state;\n  };\n\n  /**\n   * 以动画的形式显示浮动操作按钮\n   */\n  Fab.prototype.show = function () {\n    this.$fab.removeClass('mdui-fab-hide');\n  };\n\n  /**\n   * 以动画的形式隐藏浮动操作按钮\n   */\n  Fab.prototype.hide = function () {\n    this.$fab.addClass('mdui-fab-hide');\n  };\n\n  return Fab;\n})();\n","/**\n * =============================================================================\n * ************   Fab DATA API   ************\n * =============================================================================\n */\n\n$(function () {\n  // mouseenter 不冒泡，无法进行事件委托，这里用 mouseover 代替。\n  // 不管是 click 、 mouseover 还是 touchstart ，都先初始化。\n\n  $document.on('touchstart mousedown mouseover', '[mdui-fab]', function (e) {\n    var $this = $(this);\n\n    var inst = $this.data('mdui.fab');\n    if (!inst) {\n      var options = parseOptions($this.attr('mdui-fab'));\n      inst = new mdui.Fab($this, options);\n      $this.data('mdui.fab', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Select 下拉选择   ************\n * =============================================================================\n */\n\nmdui.Select = (function () {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    position: 'auto',                // 下拉框位置，auto、bottom、top\n    gutter: 16,                      // 菜单与窗口上下边框至少保持多少间距\n  };\n\n  /**\n   * 调整菜单位置\n   * @param _this Select 实例\n   */\n  var readjustMenu = function (_this) {\n    // 窗口高度\n    var windowHeight = $window.height();\n\n    // 配置参数\n    var gutter = _this.options.gutter;\n    var position = _this.options.position;\n\n    // mdui-select 高度\n    var selectHeight = parseInt(_this.$select.height());\n\n    // 菜单项高度\n    var $menuItemFirst = _this.$items.eq(0);\n    var menuItemHeight = parseInt($menuItemFirst.height());\n    var menuItemMargin = parseInt($menuItemFirst.css('margin-top'));\n\n    // 菜单高度\n    var menuWidth = parseFloat(_this.$select.width() + 0.01); // 必须比真实宽度多一点，不然会出现省略号\n    var menuHeight = menuItemHeight * _this.size + menuItemMargin * 2;\n\n    // var menuRealHeight = menuItemHeight * _this.$items.length + menuItemMargin * 2;\n\n    // 菜单是否出现了滚动条\n    //var isMenuScrollable = menuRealHeight > menuHeight;\n\n    // select 在窗口中的位置\n    var selectTop = _this.$select[0].getBoundingClientRect().top;\n\n    var transformOriginY;\n    var menuMarginTop;\n\n    // position 为 auto 时\n    if (position === 'auto') {\n\n      // 菜单高度不能超过窗口高度\n      var heightTemp = windowHeight - gutter * 2;\n      if (menuHeight > heightTemp) {\n        menuHeight = heightTemp;\n      }\n\n      // 菜单的 margin-top\n      menuMarginTop = -(\n        menuItemMargin + _this.selectedIndex * menuItemHeight +\n        (menuItemHeight - selectHeight) / 2\n      );\n      var menuMarginTopMax = -(\n        menuItemMargin + (_this.size - 1) * menuItemHeight +\n        (menuItemHeight - selectHeight) / 2\n      );\n      if (menuMarginTop < menuMarginTopMax) {\n        menuMarginTop = menuMarginTopMax;\n      }\n\n      // 菜单不能超出窗口\n      var menuTop = selectTop + menuMarginTop;\n\n      if (menuTop < gutter) {\n        // 不能超出窗口上方\n        menuMarginTop = -(selectTop - gutter);\n      } else if (menuTop + menuHeight + gutter > windowHeight) {\n        // 不能超出窗口下方\n        menuMarginTop = -(selectTop + menuHeight + gutter - windowHeight);\n      }\n\n      // transform 的 Y 轴坐标\n      transformOriginY = (_this.selectedIndex * menuItemHeight + menuItemHeight / 2 + menuItemMargin) + 'px';\n    } else if (position === 'bottom') {\n      menuMarginTop = selectHeight;\n      transformOriginY = '0px';\n    } else if (position === 'top') {\n      menuMarginTop = -menuHeight - 1;\n      transformOriginY = '100%';\n    }\n\n    // 设置样式\n    _this.$select.width(menuWidth);\n    _this.$menu\n      .width(menuWidth)\n      .height(menuHeight)\n      .css({\n        'margin-top': menuMarginTop + 'px',\n        'transform-origin':\n        'center ' + transformOriginY + ' 0',\n      });\n  };\n\n  /**\n   * 下拉选择\n   * @param selector\n   * @param opts\n   * @constructor\n   */\n  function Select(selector, opts) {\n    var _this = this;\n\n    var $selectNative =  _this.$selectNative = $(selector).eq(0);\n    if (!$selectNative.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = $selectNative.data('mdui.select');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    $selectNative.hide();\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    // 为当前 select 生成唯一 ID\n    _this.uniqueID = $.guid();\n\n    _this.state = 'closed';\n\n    // 生成 select\n    _this.handleUpdate();\n\n    // 点击 select 外面区域关闭\n    $document.on('click touchstart', function (e) {\n      var $target = $(e.target);\n      if (\n        (_this.state === 'opening' || _this.state === 'opened') &&\n        !$target.is(_this.$select) &&\n        !$.contains(_this.$select[0], $target[0])\n      ) {\n        _this.close();\n      }\n    });\n  }\n\n  /**\n   * 对原生 select 组件进行了修改后，需要调用该方法\n   */\n  Select.prototype.handleUpdate = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    }\n\n    var $selectNative = _this.$selectNative;\n\n    // 当前的值和文本\n    _this.value = $selectNative.val();\n    _this.text = '';\n\n    // 生成 HTML\n    // 菜单项\n    _this.$items = $();\n    $selectNative.find('option').each(function (index, option) {\n      var data = {\n        value: option.value,\n        text: option.textContent,\n        disabled: option.disabled,\n        selected: _this.value === option.value,\n        index: index,\n      };\n\n      if (_this.value === data.value) {\n        _this.text = data.text;\n        _this.selectedIndex = index;\n      }\n\n      _this.$items = _this.$items.add(\n        $('<div class=\"mdui-select-menu-item mdui-ripple\"' +\n          (data.disabled ? ' disabled' : '') +\n          (data.selected ? ' selected' : '') + '>' + data.text + '</div>')\n          .data(data)\n      );\n    });\n\n    // selected\n    _this.$selected = $('<span class=\"mdui-select-selected\">' + _this.text + '</span>');\n\n    // select\n    _this.$select =\n      $(\n        '<div class=\"mdui-select mdui-select-position-' + _this.options.position + '\" ' +\n        'style=\"' + _this.$selectNative.attr('style') + '\" ' +\n        'id=\"' + _this.uniqueID + '\"></div>'\n      )\n        .show()\n        .append(_this.$selected);\n\n    // menu\n    _this.$menu =\n      $('<div class=\"mdui-select-menu\"></div>')\n        .appendTo(_this.$select)\n        .append(_this.$items);\n\n    $('#' + _this.uniqueID).remove();\n    $selectNative.after(_this.$select);\n\n    // 根据 select 的 size 属性设置高度，默认为 6\n    _this.size = _this.$selectNative.attr('size');\n\n    if (!_this.size) {\n      _this.size = _this.$items.length;\n      if (_this.size > 8) {\n        _this.size = 8;\n      }\n    }\n\n    if (_this.size < 2) {\n      _this.size = 2;\n    }\n\n    // 点击选项时关闭下拉菜单\n    _this.$items.on('click', function () {\n      if (_this.state === 'closing') {\n        return;\n      }\n\n      var $item = $(this);\n\n      if ($item.data('disabled')) {\n        return;\n      }\n\n      var itemData = $item.data();\n\n      _this.$selected.text(itemData.text);\n      $selectNative.val(itemData.value);\n      _this.$items.removeAttr('selected');\n      $item.attr('selected', '');\n      _this.selectedIndex = itemData.index;\n      _this.value = itemData.value;\n      _this.text = itemData.text;\n      $selectNative.trigger('change');\n\n      _this.close();\n    });\n\n    // 点击 select 时打开下拉菜单\n    _this.$select.on('click', function (e) {\n      var $target = $(e.target);\n\n      // 在菜单上点击时不打开\n      if ($target.is('.mdui-select-menu') || $target.is('.mdui-select-menu-item')) {\n        return;\n      }\n\n      _this.toggle();\n    });\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    inst.$select.removeClass('mdui-select-closing');\n\n    if (inst.state === 'opening') {\n      inst.state = 'opened';\n      componentEvent('opened', 'select', inst, inst.$selectNative);\n\n      inst.$menu.css('overflow-y', 'auto');\n    }\n\n    if (inst.state === 'closing') {\n      inst.state = 'closed';\n      componentEvent('closed', 'select', inst, inst.$selectNative);\n\n      // 恢复样式\n      inst.$select.width('');\n      inst.$menu.css({\n        'margin-top': '',\n        height: '',\n        width: '',\n      });\n    }\n  };\n\n  /**\n   * 打开 Select\n   */\n  Select.prototype.open = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    _this.state = 'opening';\n    componentEvent('open', 'select', _this, _this.$selectNative);\n\n    readjustMenu(_this);\n\n    _this.$select.addClass('mdui-select-open');\n\n    _this.$menu.transitionEnd(function () {\n      transitionEnd(_this);\n    });\n  };\n\n  /**\n   * 关闭 Select\n   */\n  Select.prototype.close = function () {\n    var _this = this;\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    _this.state = 'closing';\n    componentEvent('close', 'select', _this, _this.$selectNative);\n\n    _this.$menu.css('overflow-y', '');\n\n    _this.$select\n      .removeClass('mdui-select-open')\n      .addClass('mdui-select-closing');\n    _this.$menu.transitionEnd(function () {\n      transitionEnd(_this);\n    });\n  };\n\n  /**\n   * 切换 Select 显示状态\n   */\n  Select.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  return Select;\n})();\n","/**\n * =============================================================================\n * ************   Select 下拉选择   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-select]', function () {\n    var $this = $(this);\n    var inst = $this.data('mdui.select');\n    if (!inst) {\n      inst = new mdui.Select($this, parseOptions($this.attr('mdui-select')));\n      $this.data('mdui.select', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Appbar   ************\n * =============================================================================\n * 滚动时自动隐藏应用栏\n * mdui-appbar-scroll-hide\n * mdui-appbar-scroll-toolbar-hide\n */\n\n$(function () {\n  // 滚动时隐藏应用栏\n  mdui.mutation('.mdui-appbar-scroll-hide', function () {\n    var $this = $(this);\n    $this.data('mdui.headroom', new mdui.Headroom($this));\n  });\n\n  // 滚动时只隐藏应用栏中的工具栏\n  mdui.mutation('.mdui-appbar-scroll-toolbar-hide', function () {\n    var $this = $(this);\n    var inst = new mdui.Headroom($this, {\n      pinnedClass: 'mdui-headroom-pinned-toolbar',\n      unpinnedClass: 'mdui-headroom-unpinned-toolbar',\n    });\n    $this.data('mdui.headroom', inst);\n  });\n});\n","/**\n * =============================================================================\n * ************   Tab   ************\n * =============================================================================\n */\n\nmdui.Tab = (function () {\n\n  var DEFAULT = {\n    trigger: 'click',       // 触发方式 click: 鼠标点击切换 hover: 鼠标悬浮切换\n    //animation: false,       // 切换时是否显示动画\n    loop: false,            // 为true时，在最后一个选项卡时调用 next() 方法会回到第一个选项卡\n  };\n\n  // 元素是否已禁用\n  var isDisabled = function ($ele) {\n    return $ele[0].disabled || $ele.attr('disabled') !== null;\n  };\n\n  /**\n   * 选项卡\n   * @param selector\n   * @param opts\n   * @returns {*}\n   * @constructor\n   */\n  function Tab(selector, opts) {\n    var _this = this;\n\n    _this.$tab = $(selector).eq(0);\n    if (!_this.$tab.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = _this.$tab.data('mdui.tab');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n    _this.$tabs = _this.$tab.children('a');\n    _this.$indicator = $('<div class=\"mdui-tab-indicator\"></div>').appendTo(_this.$tab);\n    _this.activeIndex = false; // 为 false 时表示没有激活的选项卡，或不存在选项卡\n\n    // 根据 url hash 获取默认激活的选项卡\n    var hash = location.hash;\n    if (hash) {\n      _this.$tabs.each(function (i, tab) {\n        if ($(tab).attr('href') === hash) {\n          _this.activeIndex = i;\n          return false;\n        }\n      });\n    }\n\n    // 含 mdui-tab-active 的元素默认激活\n    if (_this.activeIndex === false) {\n      _this.$tabs.each(function (i, tab) {\n        if ($(tab).hasClass('mdui-tab-active')) {\n          _this.activeIndex = i;\n          return false;\n        }\n      });\n    }\n\n    // 存在选项卡时，默认激活第一个选项卡\n    if (_this.$tabs.length && _this.activeIndex === false) {\n      _this.activeIndex = 0;\n    }\n\n    // 设置激活状态选项卡\n    _this._setActive();\n\n    // 监听窗口大小变化事件，调整指示器位置\n    $window.on('resize', $.throttle(function () {\n      _this._setIndicatorPosition();\n    }, 100));\n\n    // 监听点击选项卡事件\n    _this.$tabs.each(function (i, tab) {\n      _this._bindTabEvent(tab);\n    });\n  }\n\n  /**\n   * 绑定在 Tab 上点击或悬浮的事件\n   * @private\n   */\n  Tab.prototype._bindTabEvent = function (tab) {\n    var _this = this;\n    var $tab = $(tab);\n\n    // 点击或鼠标移入触发的事件\n    var clickEvent = function (e) {\n      // 禁用状态的选项无法选中\n      if (isDisabled($tab)) {\n        e.preventDefault();\n        return;\n      }\n\n      _this.activeIndex = _this.$tabs.index(tab);\n      _this._setActive();\n    };\n\n    // 无论 trigger 是 click 还是 hover，都会响应 click 事件\n    $tab.on('click', clickEvent);\n\n    // trigger 为 hover 时，额外响应 mouseenter 事件\n    if (_this.options.trigger === 'hover') {\n      $tab.on('mouseenter', clickEvent);\n    }\n\n    $tab.on('click', function (e) {\n      // 阻止链接的默认点击动作\n      if ($tab.attr('href').indexOf('#') === 0) {\n        e.preventDefault();\n      }\n    });\n  };\n\n  /**\n   * 设置激活状态的选项卡\n   * @private\n   */\n  Tab.prototype._setActive = function () {\n    var _this = this;\n\n    _this.$tabs.each(function (i, tab) {\n      var $tab = $(tab);\n      var targetId = $tab.attr('href');\n\n      // 设置选项卡激活状态\n      if (i === _this.activeIndex && !isDisabled($tab)) {\n        if (!$tab.hasClass('mdui-tab-active')) {\n          componentEvent('change', 'tab', _this, _this.$tab, {\n            index: _this.activeIndex,\n            id: targetId.substr(1),\n          });\n          componentEvent('show', 'tab', _this, $tab);\n\n          $tab.addClass('mdui-tab-active');\n        }\n\n        $(targetId).show();\n        _this._setIndicatorPosition();\n      } else {\n        $tab.removeClass('mdui-tab-active');\n        $(targetId).hide();\n      }\n    });\n  };\n\n  /**\n   * 设置选项卡指示器的位置\n   */\n  Tab.prototype._setIndicatorPosition = function () {\n    var _this = this;\n    var $activeTab;\n    var activeTabOffset;\n\n    // 选项卡数量为 0 时，不显示指示器\n    if (_this.activeIndex === false) {\n      _this.$indicator.css({\n        left: 0,\n        width: 0,\n      });\n\n      return;\n    }\n\n    $activeTab = _this.$tabs.eq(_this.activeIndex);\n    if (isDisabled($activeTab)) {\n      return;\n    }\n\n    activeTabOffset = $activeTab.offset();\n    _this.$indicator.css({\n      left: activeTabOffset.left + _this.$tab[0].scrollLeft -\n            _this.$tab[0].getBoundingClientRect().left + 'px',\n      width: $activeTab.width() + 'px',\n    });\n  };\n\n  /**\n   * 切换到下一个选项卡\n   */\n  Tab.prototype.next = function () {\n    var _this = this;\n\n    if (_this.activeIndex === false) {\n      return;\n    }\n\n    if (_this.$tabs.length > _this.activeIndex + 1) {\n      _this.activeIndex++;\n    } else if (_this.options.loop) {\n      _this.activeIndex = 0;\n    }\n\n    _this._setActive();\n  };\n\n  /**\n   * 切换到上一个选项卡\n   */\n  Tab.prototype.prev = function () {\n    var _this = this;\n\n    if (_this.activeIndex === false) {\n      return;\n    }\n\n    if (_this.activeIndex > 0) {\n      _this.activeIndex--;\n    } else if (_this.options.loop) {\n      _this.activeIndex = _this.$tabs.length - 1;\n    }\n\n    _this._setActive();\n  };\n\n  /**\n   * 显示指定序号或指定id的选项卡\n   * @param index 从0开始的序号，或以#开头的id\n   */\n  Tab.prototype.show = function (index) {\n    var _this = this;\n\n    if (_this.activeIndex === false) {\n      return;\n    }\n\n    if (parseInt(index) === index) {\n      _this.activeIndex = index;\n    } else {\n      _this.$tabs.each(function (i, tab) {\n        if (tab.id === index) {\n          _this.activeIndex = i;\n          return false;\n        }\n      });\n    }\n\n    _this._setActive();\n  };\n\n  /**\n   * 在父元素的宽度变化时，需要调用该方法重新调整指示器位置\n   * 在添加或删除选项卡时，需要调用该方法\n   */\n  Tab.prototype.handleUpdate = function () {\n    var _this = this;\n\n    var $oldTabs = _this.$tabs;               // 旧的 tabs JQ对象\n    var $newTabs = _this.$tab.children('a');  // 新的 tabs JQ对象\n    var oldTabsEle = $oldTabs.get();          // 旧 tabs 的元素数组\n    var newTabsEle = $newTabs.get();          // 新的 tabs 元素数组\n\n    if (!$newTabs.length) {\n      _this.activeIndex = false;\n      _this.$tabs = $newTabs;\n      _this._setIndicatorPosition();\n\n      return;\n    }\n\n    // 重新遍历选项卡，找出新增的选项卡\n    $newTabs.each(function (i, tab) {\n      // 有新增的选项卡\n      if (oldTabsEle.indexOf(tab) < 0) {\n        _this._bindTabEvent(tab);\n\n        if (_this.activeIndex === false) {\n          _this.activeIndex = 0;\n        } else if (i <= _this.activeIndex) {\n          _this.activeIndex++;\n        }\n      }\n    });\n\n    // 找出被移除的选项卡\n    $oldTabs.each(function (i, tab) {\n      // 有被移除的选项卡\n      if (newTabsEle.indexOf(tab) < 0) {\n\n        if (i < _this.activeIndex) {\n          _this.activeIndex--;\n        } else if (i === _this.activeIndex) {\n          _this.activeIndex = 0;\n        }\n      }\n    });\n\n    _this.$tabs = $newTabs;\n\n    _this._setActive();\n  };\n\n  return Tab;\n})();\n","/**\n * =============================================================================\n * ************   Tab 自定义属性 API   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-tab]', function () {\n    var $this = $(this);\n    var inst = $this.data('mdui.tab');\n    if (!inst) {\n      inst = new mdui.Tab($this, parseOptions($this.attr('mdui-tab')));\n      $this.data('mdui.tab', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Drawer 抽屉栏   ************\n * =============================================================================\n *\n * 在桌面设备上默认显示抽屉栏，不显示遮罩层\n * 在手机和平板设备上默认不显示抽屉栏，始终显示遮罩层，且覆盖导航栏\n */\n\nmdui.Drawer = (function () {\n\n  /**\n   * 默认参数\n   * @type {{}}\n   */\n  var DEFAULT = {\n    // 在桌面设备上是否显示遮罩层。手机和平板不受这个参数影响，始终会显示遮罩层\n    overlay: false,\n\n    // 是否开启手势\n    swipe: false,\n  };\n\n  var isDesktop = function () {\n    return $window.width() >= 1024;\n  };\n\n  /**\n   * 抽屉栏实例\n   * @param selector 选择器或 HTML 字符串或 DOM 元素\n   * @param opts\n   * @constructor\n   */\n  function Drawer(selector, opts) {\n    var _this = this;\n\n    _this.$drawer = $(selector).eq(0);\n    if (!_this.$drawer.length) {\n      return;\n    }\n\n    var oldInst = _this.$drawer.data('mdui.drawer');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    _this.overlay = false; // 是否显示着遮罩层\n    _this.position = _this.$drawer.hasClass('mdui-drawer-right') ? 'right' : 'left';\n\n    if (_this.$drawer.hasClass('mdui-drawer-close')) {\n      _this.state = 'closed';\n    } else if (_this.$drawer.hasClass('mdui-drawer-open')) {\n      _this.state = 'opened';\n    } else if (isDesktop()) {\n      _this.state = 'opened';\n    } else {\n      _this.state = 'closed';\n    }\n\n    // 浏览器窗口大小调整时\n    $window.on('resize', $.throttle(function () {\n      // 由手机平板切换到桌面时\n      if (isDesktop()) {\n        // 如果显示着遮罩，则隐藏遮罩\n        if (_this.overlay && !_this.options.overlay) {\n          $.hideOverlay();\n          _this.overlay = false;\n          $.unlockScreen();\n        }\n\n        // 没有强制关闭，则状态为打开状态\n        if (!_this.$drawer.hasClass('mdui-drawer-close')) {\n          _this.state = 'opened';\n        }\n      }\n\n      // 由桌面切换到手机平板时。如果抽屉栏是打开着的且没有遮罩层，则关闭抽屉栏\n      else {\n        if (!_this.overlay && _this.state === 'opened') {\n          // 抽屉栏处于强制打开状态，添加遮罩\n          if (_this.$drawer.hasClass('mdui-drawer-open')) {\n            $.showOverlay();\n            _this.overlay = true;\n            $.lockScreen();\n\n            $('.mdui-overlay').one('click', function () {\n              _this.close();\n            });\n          } else {\n            _this.state = 'closed';\n          }\n        }\n      }\n    }, 100));\n\n    // 绑定关闭按钮事件\n    _this.$drawer.find('[mdui-drawer-close]').each(function () {\n      $(this).on('click', function () {\n        _this.close();\n      });\n    });\n\n    swipeSupport(_this);\n  }\n\n  /**\n   * 滑动手势支持\n   * @param _this\n   */\n  var swipeSupport = function (_this) {\n    // 抽屉栏滑动手势控制\n    var openNavEventHandler;\n    var touchStartX;\n    var touchStartY;\n    var swipeStartX;\n    var swiping = false;\n    var maybeSwiping = false;\n    var $body = $('body');\n\n    // 手势触发的范围\n    var swipeAreaWidth = 24;\n\n    function enableSwipeHandling() {\n      if (!openNavEventHandler) {\n        $body.on('touchstart', onBodyTouchStart);\n        openNavEventHandler = onBodyTouchStart;\n      }\n    }\n\n    function setPosition(translateX, closeTransform) {\n      var rtlTranslateMultiplier = _this.position === 'right' ? -1 : 1;\n      var transformCSS = 'translate(' + (-1 * rtlTranslateMultiplier * translateX) + 'px, 0) !important;';\n      _this.$drawer.css(\n        'cssText',\n        'transform:' + transformCSS + (closeTransform ? 'transition: initial !important;' : '')\n      );\n    }\n\n    function cleanPosition() {\n      _this.$drawer.css({\n        transform: '',\n        transition: '',\n      });\n    }\n\n    function getMaxTranslateX() {\n      return _this.$drawer.width() + 10;\n    }\n\n    function getTranslateX(currentX) {\n      return Math.min(\n        Math.max(\n          swiping === 'closing' ? (swipeStartX - currentX) : (getMaxTranslateX() + swipeStartX - currentX),\n          0\n        ),\n        getMaxTranslateX()\n      );\n    }\n\n    function onBodyTouchStart(event) {\n      touchStartX = event.touches[0].pageX;\n      if (_this.position === 'right') {\n        touchStartX = $body.width() - touchStartX;\n      }\n\n      touchStartY = event.touches[0].pageY;\n\n      if (_this.state !== 'opened') {\n        if (touchStartX > swipeAreaWidth || openNavEventHandler !== onBodyTouchStart) {\n          return;\n        }\n      }\n\n      maybeSwiping = true;\n\n      $body.on({\n        touchmove: onBodyTouchMove,\n        touchend: onBodyTouchEnd,\n        touchcancel: onBodyTouchMove,\n      });\n    }\n\n    function onBodyTouchMove(event) {\n      var touchX = event.touches[0].pageX;\n      if (_this.position === 'right') {\n        touchX = $body.width() - touchX;\n      }\n\n      var touchY = event.touches[0].pageY;\n\n      if (swiping) {\n        setPosition(getTranslateX(touchX), true);\n      } else if (maybeSwiping) {\n        var dXAbs = Math.abs(touchX - touchStartX);\n        var dYAbs = Math.abs(touchY - touchStartY);\n        var threshold = 8;\n\n        if (dXAbs > threshold && dYAbs <= threshold) {\n          swipeStartX = touchX;\n          swiping = _this.state === 'opened' ? 'closing' : 'opening';\n          $.lockScreen();\n          setPosition(getTranslateX(touchX), true);\n        } else if (dXAbs <= threshold && dYAbs > threshold) {\n          onBodyTouchEnd();\n        }\n      }\n    }\n\n    function onBodyTouchEnd(event) {\n      if (swiping) {\n        var touchX = event.changedTouches[0].pageX;\n        if (_this.position === 'right') {\n          touchX = $body.width() - touchX;\n        }\n\n        var translateRatio = getTranslateX(touchX) / getMaxTranslateX();\n\n        maybeSwiping = false;\n        var swipingState = swiping;\n        swiping = null;\n\n        if (swipingState === 'opening') {\n          if (translateRatio < 0.92) {\n            cleanPosition();\n            _this.open();\n          } else {\n            cleanPosition();\n          }\n        } else {\n          if (translateRatio > 0.08) {\n            cleanPosition();\n            _this.close();\n          } else {\n            cleanPosition();\n          }\n        }\n\n        $.unlockScreen();\n      } else {\n        maybeSwiping = false;\n      }\n\n      $body.off({\n        touchmove: onBodyTouchMove,\n        touchend: onBodyTouchEnd,\n        touchcancel: onBodyTouchMove,\n      });\n    }\n\n    if (_this.options.swipe) {\n      enableSwipeHandling();\n    }\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    if (inst.$drawer.hasClass('mdui-drawer-open')) {\n      inst.state = 'opened';\n      componentEvent('opened', 'drawer', inst, inst.$drawer);\n    } else {\n      inst.state = 'closed';\n      componentEvent('closed', 'drawer', inst, inst.$drawer);\n    }\n  };\n\n  /**\n   * 打开抽屉栏\n   */\n  Drawer.prototype.open = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    _this.state = 'opening';\n    componentEvent('open', 'drawer', _this, _this.$drawer);\n\n    if (!_this.options.overlay) {\n      $('body').addClass('mdui-drawer-body-' + _this.position);\n    }\n\n    _this.$drawer\n      .removeClass('mdui-drawer-close')\n      .addClass('mdui-drawer-open')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n\n    if (!isDesktop() || _this.options.overlay) {\n      _this.overlay = true;\n      $.showOverlay().one('click', function () {\n        _this.close();\n      });\n\n      $.lockScreen();\n    }\n  };\n\n  /**\n   * 关闭抽屉栏\n   */\n  Drawer.prototype.close = function () {\n    var _this = this;\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    _this.state = 'closing';\n    componentEvent('close', 'drawer', _this, _this.$drawer);\n\n    if (!_this.options.overlay) {\n      $('body').removeClass('mdui-drawer-body-' + _this.position);\n    }\n\n    _this.$drawer\n      .addClass('mdui-drawer-close')\n      .removeClass('mdui-drawer-open')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n\n    if (_this.overlay) {\n      $.hideOverlay();\n      _this.overlay = false;\n      $.unlockScreen();\n    }\n  };\n\n  /**\n   * 切换抽屉栏打开/关闭状态\n   */\n  Drawer.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  /**\n   * 获取抽屉栏状态\n   * @returns {'opening'|'opened'|'closing'|'closed'}\n   */\n  Drawer.prototype.getState = function () {\n    return this.state;\n  };\n\n  return Drawer;\n\n})();\n","/**\n * =============================================================================\n * ************   Drawer 自定义属性 API   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-drawer]', function () {\n    var $this = $(this);\n    var options = parseOptions($this.attr('mdui-drawer'));\n    var selector = options.target;\n    delete options.target;\n\n    var $drawer = $(selector).eq(0);\n\n    var inst = $drawer.data('mdui.drawer');\n    if (!inst) {\n      inst = new mdui.Drawer($drawer, options);\n      $drawer.data('mdui.drawer', inst);\n    }\n\n    $this.on('click', function () {\n      inst.toggle();\n    });\n\n  });\n});\n","/**\n * =============================================================================\n * ************   Dialog 对话框   ************\n * =============================================================================\n */\n\nmdui.Dialog = (function () {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    history: true,                // 监听 hashchange 事件\n    overlay: true,                // 打开对话框时是否显示遮罩\n    modal: false,                 // 是否模态化对话框，为 false 时点击对话框外面区域关闭对话框，为 true 时不关闭\n    closeOnEsc: true,             // 按下 esc 关闭对话框\n    closeOnCancel: true,          // 按下取消按钮时关闭对话框\n    closeOnConfirm: true,         // 按下确认按钮时关闭对话框\n    destroyOnClosed: false,        // 关闭后销毁\n  };\n\n  /**\n   * 遮罩层元素\n   */\n  var $overlay;\n\n  /**\n   * 窗口是否已锁定\n   */\n  var isLockScreen;\n\n  /**\n   * 当前对话框实例\n   */\n  var currentInst;\n\n  /**\n   * 队列名\n   */\n  var queueName = '__md_dialog';\n\n  /**\n   * 窗口宽度变化，或对话框内容变化时，调整对话框位置和对话框内的滚动条\n   */\n  var readjust = function () {\n    if (!currentInst) {\n      return;\n    }\n\n    var $dialog = currentInst.$dialog;\n\n    var $dialogTitle = $dialog.children('.mdui-dialog-title');\n    var $dialogContent = $dialog.children('.mdui-dialog-content');\n    var $dialogActions = $dialog.children('.mdui-dialog-actions');\n\n    // 调整 dialog 的 top 和 height 值\n    $dialog.height('');\n    $dialogContent.height('');\n\n    var dialogHeight = $dialog.height();\n    $dialog.css({\n      top: (($window.height() - dialogHeight) / 2) + 'px',\n      height: dialogHeight + 'px',\n    });\n\n    // 调整 mdui-dialog-content 的高度\n    $dialogContent.height(dialogHeight - ($dialogTitle.height() || 0) - ($dialogActions.height() || 0));\n  };\n\n  /**\n   * hashchange 事件触发时关闭对话框\n   */\n  var hashchangeEvent = function () {\n    if (location.hash.substring(1).indexOf('mdui-dialog') < 0) {\n      currentInst.close(true);\n    }\n  };\n\n  /**\n   * 点击遮罩层关闭对话框\n   * @param e\n   */\n  var overlayClick = function (e) {\n    if ($(e.target).hasClass('mdui-overlay') && currentInst) {\n      currentInst.close();\n    }\n  };\n\n  /**\n   * 对话框实例\n   * @param selector 选择器或 HTML 字符串或 DOM 元素\n   * @param opts\n   * @constructor\n   */\n  function Dialog(selector, opts) {\n    var _this = this;\n\n    // 对话框元素\n    _this.$dialog = $(selector).eq(0);\n    if (!_this.$dialog.length) {\n      return;\n    }\n\n    // 已通过 data 属性实例化过，不再重复实例化\n    var oldInst = _this.$dialog.data('mdui.dialog');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    // 如果对话框元素没有在当前文档中，则需要添加\n    if (!$.contains(document.body, _this.$dialog[0])) {\n      _this.append = true;\n      $('body').append(_this.$dialog);\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n    _this.state = 'closed';\n\n    // 绑定取消按钮事件\n    _this.$dialog.find('[mdui-dialog-cancel]').each(function () {\n      $(this).on('click', function () {\n        componentEvent('cancel', 'dialog', _this, _this.$dialog);\n        if (_this.options.closeOnCancel) {\n          _this.close();\n        }\n      });\n    });\n\n    // 绑定确认按钮事件\n    _this.$dialog.find('[mdui-dialog-confirm]').each(function () {\n      $(this).on('click', function () {\n        componentEvent('confirm', 'dialog', _this, _this.$dialog);\n        if (_this.options.closeOnConfirm) {\n          _this.close();\n        }\n      });\n    });\n\n    // 绑定关闭按钮事件\n    _this.$dialog.find('[mdui-dialog-close]').each(function () {\n      $(this).on('click', function () {\n        _this.close();\n      });\n    });\n  }\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    if (inst.$dialog.hasClass('mdui-dialog-open')) {\n      inst.state = 'opened';\n      componentEvent('opened', 'dialog', inst, inst.$dialog);\n    } else {\n      inst.state = 'closed';\n      componentEvent('closed', 'dialog', inst, inst.$dialog);\n\n      inst.$dialog.hide();\n\n      // 所有对话框都关闭，且当前没有打开的对话框时，解锁屏幕\n      if (queue.queue(queueName).length === 0 && !currentInst && isLockScreen) {\n        $.unlockScreen();\n        isLockScreen = false;\n      }\n\n      $window.off('resize', $.throttle(function () {\n        readjust();\n      }, 100));\n\n      if (inst.options.destroyOnClosed) {\n        inst.destroy();\n      }\n    }\n  };\n\n  /**\n   * 打开指定对话框\n   * @private\n   */\n  Dialog.prototype._doOpen = function () {\n    var _this = this;\n\n    currentInst = _this;\n\n    if (!isLockScreen) {\n      $.lockScreen();\n      isLockScreen = true;\n    }\n\n    _this.$dialog.show();\n\n    readjust();\n    $window.on('resize', $.throttle(function () {\n      readjust();\n    }, 100));\n\n    // 打开消息框\n    _this.state = 'opening';\n    componentEvent('open', 'dialog', _this, _this.$dialog);\n\n    _this.$dialog\n      .addClass('mdui-dialog-open')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n\n    // 不存在遮罩层元素时，添加遮罩层\n    if (!$overlay) {\n      $overlay = $.showOverlay(5100);\n    }\n\n    $overlay\n\n      // 点击遮罩层时是否关闭对话框\n      [_this.options.modal ? 'off' : 'on']('click', overlayClick)\n\n      // 是否显示遮罩层，不显示时，把遮罩层背景透明\n      .css('opacity', _this.options.overlay ? '' : 0);\n\n    if (_this.options.history) {\n      // 如果 hash 中原来就有 mdui-dialog，先删除，避免后退历史纪录后仍然有 mdui-dialog 导致无法关闭\n      // 包括 mdui-dialog 和 &mdui-dialog 和 ?mdui-dialog\n      var hash = location.hash.substring(1);\n      if (hash.indexOf('mdui-dialog') > -1) {\n        hash = hash.replace(/[&?]?mdui-dialog/g, '');\n      }\n\n      // 后退按钮关闭对话框\n      if (hash) {\n        location.hash = hash + (hash.indexOf('?') > -1 ? '&' : '?') + 'mdui-dialog';\n      } else {\n        location.hash = 'mdui-dialog';\n      }\n\n      $window.on('hashchange', hashchangeEvent);\n    }\n  };\n\n  /**\n   * 打开对话框\n   */\n  Dialog.prototype.open = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    // 如果当前有正在打开或已经打开的对话框,或队列不为空，则先加入队列，等旧对话框开始关闭时再打开\n    if (\n      (currentInst && (currentInst.state === 'opening' || currentInst.state === 'opened')) ||\n      queue.queue(queueName).length\n    ) {\n      queue.queue(queueName, function () {\n        _this._doOpen();\n      });\n\n      return;\n    }\n\n    _this._doOpen();\n  };\n\n  /**\n   * 关闭对话框\n   */\n  Dialog.prototype.close = function () {\n    var _this = this;\n    var _arguments = arguments;\n\n    // setTimeout 的作用是：\n    // 当同时关闭一个对话框，并打开另一个对话框时，使打开对话框的操作先执行，以使需要打开的对话框先加入队列\n    setTimeout(function () {\n      if (_this.state === 'closing' || _this.state === 'closed') {\n        return;\n      }\n\n      currentInst = null;\n\n      _this.state = 'closing';\n      componentEvent('close', 'dialog', _this, _this.$dialog);\n\n      // 所有对话框都关闭，且当前没有打开的对话框时，隐藏遮罩\n      if (queue.queue(queueName).length === 0 && $overlay) {\n        $.hideOverlay();\n        $overlay = null;\n      }\n\n      _this.$dialog\n        .removeClass('mdui-dialog-open')\n        .transitionEnd(function () {\n          transitionEnd(_this);\n        });\n\n      if (_this.options.history && queue.queue(queueName).length === 0) {\n        // 是否需要后退历史纪录，默认为 false。\n        // 为 false 时是通过 js 关闭，需要后退一个历史记录\n        // 为 true 时是通过后退按钮关闭，不需要后退历史记录\n        if (!_arguments[0]) {\n          window.history.back();\n        }\n\n        $window.off('hashchange', hashchangeEvent);\n      }\n\n      // 关闭旧对话框，打开新对话框。\n      // 加一点延迟，仅仅为了视觉效果更好。不加延时也不影响功能\n      setTimeout(function () {\n        queue.dequeue(queueName);\n      }, 100);\n    }, 0);\n  };\n\n  /**\n   * 切换对话框打开/关闭状态\n   */\n  Dialog.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  /**\n   * 获取对话框状态\n   * @returns {'opening'|'opened'|'closing'|'closed'}\n   */\n  Dialog.prototype.getState = function () {\n    return this.state;\n  };\n\n  /**\n   * 销毁对话框\n   */\n  Dialog.prototype.destroy = function () {\n    var _this = this;\n\n    if (_this.append) {\n      _this.$dialog.remove();\n    }\n\n    _this.$dialog.removeData('mdui.dialog');\n\n    if (queue.queue(queueName).length === 0 && !currentInst) {\n      if ($overlay) {\n        $.hideOverlay();\n        $overlay = null;\n      }\n\n      if (isLockScreen) {\n        $.unlockScreen();\n        isLockScreen = false;\n      }\n    }\n  };\n\n  /**\n   * 对话框内容变化时，需要调用该方法来调整对话框位置和滚动条高度\n   */\n  Dialog.prototype.handleUpdate = function () {\n    readjust();\n  };\n\n  // esc 按下时关闭对话框\n  $document.on('keydown', function (e) {\n    if (\n      currentInst &&\n      currentInst.options.closeOnEsc &&\n      currentInst.state === 'opened' &&\n      e.keyCode === 27\n    ) {\n      currentInst.close();\n    }\n  });\n\n  return Dialog;\n\n})();\n","/**\n * =============================================================================\n * ************   Dialog DATA API   ************\n * =============================================================================\n */\n\n$(function () {\n  $document.on('click', '[mdui-dialog]', function () {\n    var $this = $(this);\n    var options = parseOptions($this.attr('mdui-dialog'));\n    var selector = options.target;\n    delete options.target;\n\n    var $dialog = $(selector).eq(0);\n\n    var inst = $dialog.data('mdui.dialog');\n    if (!inst) {\n      inst = new mdui.Dialog($dialog, options);\n      $dialog.data('mdui.dialog', inst);\n    }\n\n    inst.open();\n  });\n});\n","/**\n * =============================================================================\n * ************   mdui.dialog(options)   ************\n * =============================================================================\n */\n\nmdui.dialog = function (options) {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    title: '',                // 标题\n    content: '',              // 文本\n    buttons: [],              // 按钮\n    stackedButtons: false,    // 垂直排列按钮\n    cssClass: '',             // 在 Dialog 上添加的 CSS 类\n    history: true,            // 监听 hashchange 事件\n    overlay: true,            // 是否显示遮罩\n    modal: false,             // 是否模态化对话框\n    closeOnEsc: true,         // 按下 esc 时关闭对话框\n    destroyOnClosed: true,    // 关闭后销毁\n    onOpen: function () {     // 打开动画开始时的回调\n    },\n\n    onOpened: function () {   // 打开动画结束后的回调\n    },\n\n    onClose: function () {    // 关闭动画开始时的回调\n    },\n\n    onClosed: function () {   // 关闭动画结束时的回调\n    },\n  };\n\n  /**\n   * 按钮的默认参数\n   */\n  var DEFAULT_BUTTON = {\n    text: '',                   // 按钮文本\n    bold: false,                // 按钮文本是否加粗\n    close: true,                // 点击按钮后关闭对话框\n    onClick: function (inst) {  // 点击按钮的回调\n    },\n  };\n\n  // 合并参数\n  options = $.extend({}, DEFAULT, (options || {}));\n  $.each(options.buttons, function (i, button) {\n    options.buttons[i] = $.extend({}, DEFAULT_BUTTON, button);\n  });\n\n  // 按钮的 HTML\n  var buttonsHTML = '';\n  if (options.buttons.length) {\n    buttonsHTML =\n      '<div class=\"mdui-dialog-actions ' +\n        (options.stackedButtons ? 'mdui-dialog-actions-stacked' : '') +\n      '\">';\n    $.each(options.buttons, function (i, button) {\n      buttonsHTML +=\n        '<a href=\"javascript:void(0)\" ' +\n          'class=\"mdui-btn mdui-ripple mdui-text-color-primary ' +\n          (button.bold ? 'mdui-btn-bold' : '') + '\">' +\n          button.text +\n        '</a>';\n    });\n\n    buttonsHTML += '</div>';\n  }\n\n  // Dialog 的 HTML\n  var HTML =\n    '<div class=\"mdui-dialog ' + options.cssClass + '\">' +\n      (options.title ? '<div class=\"mdui-dialog-title\">' + options.title + '</div>' : '') +\n      (options.content ? '<div class=\"mdui-dialog-content\">' + options.content + '</div>' : '') +\n      buttonsHTML +\n    '</div>';\n\n  // 实例化 Dialog\n  var inst = new mdui.Dialog(HTML, {\n    history: options.history,\n    overlay: options.overlay,\n    modal: options.modal,\n    closeOnEsc: options.closeOnEsc,\n    destroyOnClosed: options.destroyOnClosed,\n  });\n\n  // 绑定按钮事件\n  if (options.buttons.length) {\n    inst.$dialog.find('.mdui-dialog-actions .mdui-btn').each(function (i, button) {\n      $(button).on('click', function () {\n        if (typeof options.buttons[i].onClick === 'function') {\n          options.buttons[i].onClick(inst);\n        }\n\n        if (options.buttons[i].close) {\n          inst.close();\n        }\n      });\n    });\n  }\n\n  // 绑定打开关闭事件\n  if (typeof options.onOpen === 'function') {\n    inst.$dialog\n      .on('open.mdui.dialog', function () {\n        options.onOpen(inst);\n      })\n      .on('opened.mdui.dialog', function () {\n        options.onOpened(inst);\n      })\n      .on('close.mdui.dialog', function () {\n        options.onClose(inst);\n      })\n      .on('closed.mdui.dialog', function () {\n        options.onClosed(inst);\n      });\n  }\n\n  inst.open();\n\n  return inst;\n};\n","/**\n * =============================================================================\n * ************   mdui.alert(text, title, onConfirm, options)   ************\n * ************   mdui.alert(text, onConfirm, options)   ************\n * =============================================================================\n */\n\nmdui.alert = function (text, title, onConfirm, options) {\n\n  // title 参数可选\n  if (typeof title === 'function') {\n    title = '';\n    onConfirm = arguments[1];\n    options = arguments[2];\n  }\n\n  if (onConfirm === undefined) {\n    onConfirm = function () {};\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    confirmText: 'ok',             // 按钮上的文本\n    history: true,                 // 监听 hashchange 事件\n    modal: false,                  // 是否模态化对话框，为 false 时点击对话框外面区域关闭对话框，为 true 时不关闭\n    closeOnEsc: true,              // 按下 esc 关闭对话框\n  };\n\n  options = $.extend({}, DEFAULT, options);\n\n  return mdui.dialog({\n    title: title,\n    content: text,\n    buttons: [\n      {\n        text: options.confirmText,\n        bold: false,\n        close: true,\n        onClick: onConfirm,\n      },\n    ],\n    cssClass: 'mdui-dialog-alert',\n    history: options.history,\n    modal: options.modal,\n    closeOnEsc: options.closeOnEsc,\n  });\n};\n","/**\n * =============================================================================\n * ************   mdui.confirm(text, title, onConfirm, onCancel, options)   ************\n * ************   mdui.confirm(text, onConfirm, onCancel, options)          ************\n * =============================================================================\n */\n\nmdui.confirm = function (text, title, onConfirm, onCancel, options) {\n\n  // title 参数可选\n  if (typeof title === 'function') {\n    title = '';\n    onConfirm = arguments[1];\n    onCancel = arguments[2];\n    options = arguments[3];\n  }\n\n  if (onConfirm === undefined) {\n    onConfirm = function () {};\n  }\n\n  if (onCancel === undefined) {\n    onCancel = function () {};\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    confirmText: 'ok',            // 确认按钮的文本\n    cancelText: 'cancel',         // 取消按钮的文本\n    history: true,                // 监听 hashchange 事件\n    modal: false,                 // 是否模态化对话框，为 false 时点击对话框外面区域关闭对话框，为 true 时不关闭\n    closeOnEsc: true,             // 按下 esc 关闭对话框\n  };\n\n  options = $.extend({}, DEFAULT, options);\n\n  return mdui.dialog({\n    title: title,\n    content: text,\n    buttons: [\n      {\n        text: options.cancelText,\n        bold: false,\n        close: true,\n        onClick: onCancel,\n      },\n      {\n        text: options.confirmText,\n        bold: false,\n        close: true,\n        onClick: onConfirm,\n      },\n    ],\n    cssClass: 'mdui-dialog-confirm',\n    history: options.history,\n    modal: options.modal,\n    closeOnEsc: options.closeOnEsc,\n  });\n};\n","/**\n * =============================================================================\n * ************   mdui.prompt(label, title, onConfirm, onCancel, options)   ************\n * ************   mdui.prompt(label, onConfirm, onCancel, options)          ************\n * =============================================================================\n */\n\nmdui.prompt = function (label, title, onConfirm, onCancel, options) {\n\n  // title 参数可选\n  if (typeof title === 'function') {\n    title = '';\n    onConfirm = arguments[1];\n    onCancel = arguments[2];\n    options = arguments[3];\n  }\n\n  if (onConfirm === undefined) {\n    onConfirm = function () {};\n  }\n\n  if (onCancel === undefined) {\n    onCancel = function () {};\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    confirmText: 'ok',        // 确认按钮的文本\n    cancelText: 'cancel',     // 取消按钮的文本\n    history: true,            // 监听 hashchange 事件\n    modal: false,             // 是否模态化对话框，为 false 时点击对话框外面区域关闭对话框，为 true 时不关闭\n    closeOnEsc: true,         // 按下 esc 关闭对话框\n    type: 'text',             // 输入框类型，text: 单行文本框 textarea: 多行文本框\n    maxlength: '',            // 最大输入字符数\n    defaultValue: '',         // 输入框中的默认文本\n    confirmOnEnter: false,    // 按下 enter 确认输入内容\n  };\n\n  options = $.extend({}, DEFAULT, options);\n\n  var content =\n    '<div class=\"mdui-textfield\">' +\n      (label ? '<label class=\"mdui-textfield-label\">' + label + '</label>' : '') +\n      (options.type === 'text' ?\n        '<input class=\"mdui-textfield-input\" type=\"text\" ' +\n          'value=\"' + options.defaultValue + '\" ' +\n          (options.maxlength ? ('maxlength=\"' + options.maxlength + '\"') : '') + '/>' :\n        '') +\n      (options.type === 'textarea' ?\n        '<textarea class=\"mdui-textfield-input\" ' +\n          (options.maxlength ? ('maxlength=\"' + options.maxlength + '\"') : '') + '>' +\n            options.defaultValue +\n        '</textarea>' :\n        '') +\n    '</div>';\n\n  return mdui.dialog({\n    title: title,\n    content: content,\n    buttons: [\n      {\n        text: options.cancelText,\n        bold: false,\n        close: true,\n        onClick: function (inst) {\n          var value = inst.$dialog.find('.mdui-textfield-input').val();\n          onCancel(value, inst);\n        },\n      },\n      {\n        text: options.confirmText,\n        bold: false,\n        close: true,\n        onClick: function (inst) {\n          var value = inst.$dialog.find('.mdui-textfield-input').val();\n          onConfirm(value, inst);\n        },\n      },\n    ],\n    cssClass: 'mdui-dialog-prompt',\n    history: options.history,\n    modal: options.modal,\n    closeOnEsc: options.closeOnEsc,\n    onOpen: function (inst) {\n\n      // 初始化输入框\n      var $input = inst.$dialog.find('.mdui-textfield-input');\n      mdui.updateTextFields($input);\n\n      // 聚焦到输入框\n      $input[0].focus();\n\n      // 捕捉文本框回车键，在单行文本框的情况下触发回调\n      if (options.type === 'text' && options.confirmOnEnter === true) {\n        $input.on('keydown', function (event) {\n          if (event.keyCode === 13) {\n            var value = inst.$dialog.find('.mdui-textfield-input').val();\n            onConfirm(value, inst);\n            inst.close();\n          }\n        });\n      }\n\n      // 如果是多行输入框，监听输入框的 input 事件，更新对话框高度\n      if (options.type === 'textarea') {\n        $input.on('input', function () {\n          inst.handleUpdate();\n        });\n      }\n\n      // 有字符数限制时，加载完文本框后 DOM 会变化，需要更新对话框高度\n      if (options.maxlength) {\n        inst.handleUpdate();\n      }\n    },\n  });\n\n};\n","/**\n * =============================================================================\n * ************   ToolTip 工具提示   ************\n * =============================================================================\n */\n\nmdui.Tooltip = (function () {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    position: 'auto',     // 提示所在位置\n    delay: 0,             // 延迟，单位毫秒\n    content: '',          // 提示文本，允许包含 HTML\n  };\n\n  /**\n   * 是否是桌面设备\n   * @returns {boolean}\n   */\n  var isDesktop = function () {\n    return $window.width() > 1024;\n  };\n\n  /**\n   * 设置 Tooltip 的位置\n   * @param inst\n   */\n  function setPosition(inst) {\n    var marginLeft;\n    var marginTop;\n    var position;\n\n    // 触发的元素\n    var targetProps = inst.$target[0].getBoundingClientRect();\n\n    // 触发的元素和 Tooltip 之间的距离\n    var targetMargin = (isDesktop() ? 14 : 24);\n\n    // Tooltip 的宽度和高度\n    var tooltipWidth = inst.$tooltip[0].offsetWidth;\n    var tooltipHeight = inst.$tooltip[0].offsetHeight;\n\n    // Tooltip 的方向\n    position = inst.options.position;\n\n    // 自动判断位置，加 2px，使 Tooltip 距离窗口边框至少有 2px 的间距\n    if (['bottom', 'top', 'left', 'right'].indexOf(position) === -1) {\n      if (\n        targetProps.top + targetProps.height + targetMargin + tooltipHeight + 2 <\n        $window.height()\n      ) {\n        position = 'bottom';\n      } else if (targetMargin + tooltipHeight + 2 < targetProps.top) {\n        position = 'top';\n      } else if (targetMargin + tooltipWidth + 2 < targetProps.left) {\n        position = 'left';\n      } else if (\n        targetProps.width + targetMargin + tooltipWidth + 2 <\n        $window.width() - targetProps.left\n      ) {\n        position = 'right';\n      } else {\n        position = 'bottom';\n      }\n    }\n\n    // 设置位置\n    switch (position) {\n      case 'bottom':\n        marginLeft = -1 * (tooltipWidth / 2);\n        marginTop = (targetProps.height / 2) + targetMargin;\n        inst.$tooltip.transformOrigin('top center');\n        break;\n      case 'top':\n        marginLeft = -1 * (tooltipWidth / 2);\n        marginTop = -1 * (tooltipHeight + (targetProps.height / 2) + targetMargin);\n        inst.$tooltip.transformOrigin('bottom center');\n        break;\n      case 'left':\n        marginLeft = -1 * (tooltipWidth + (targetProps.width / 2) + targetMargin);\n        marginTop = -1 * (tooltipHeight / 2);\n        inst.$tooltip.transformOrigin('center right');\n        break;\n      case 'right':\n        marginLeft = (targetProps.width / 2) + targetMargin;\n        marginTop = -1 * (tooltipHeight / 2);\n        inst.$tooltip.transformOrigin('center left');\n        break;\n    }\n\n    var targetOffset = inst.$target.offset();\n    inst.$tooltip.css({\n      top: targetOffset.top + (targetProps.height / 2) + 'px',\n      left: targetOffset.left + (targetProps.width / 2) + 'px',\n      'margin-left': marginLeft + 'px',\n      'margin-top': marginTop + 'px',\n    });\n  }\n\n  /**\n   * Tooltip 实例\n   * @param selector\n   * @param opts\n   * @constructor\n   */\n  function Tooltip(selector, opts) {\n    var _this = this;\n\n    _this.$target = $(selector).eq(0);\n    if (!_this.$target.length) {\n      return;\n    }\n\n    // 已通过 data 属性实例化过，不再重复实例化\n    var oldInst = _this.$target.data('mdui.tooltip');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n    _this.state = 'closed';\n\n    // 创建 Tooltip HTML\n    _this.$tooltip = $(\n      '<div class=\"mdui-tooltip\" id=\"' + $.guid() + '\">' +\n        _this.options.content +\n      '</div>'\n    ).appendTo(document.body);\n\n    // 绑定事件。元素处于 disabled 状态时无法触发鼠标事件，为了统一，把 touch 事件也禁用\n    _this.$target\n      .on('touchstart mouseenter', function (e) {\n        if (this.disabled) {\n          return;\n        }\n\n        if (!TouchHandler.isAllow(e)) {\n          return;\n        }\n\n        TouchHandler.register(e);\n\n        _this.open();\n      })\n      .on('touchend mouseleave', function (e) {\n        if (this.disabled) {\n          return;\n        }\n\n        if (!TouchHandler.isAllow(e)) {\n          return;\n        }\n\n        _this.close();\n      })\n      .on(TouchHandler.unlock, function (e) {\n        if (this.disabled) {\n          return;\n        }\n\n        TouchHandler.register(e);\n      });\n  }\n\n  /**\n   * 动画结束回调\n   * @private\n   */\n  var transitionEnd = function (inst) {\n    if (inst.$tooltip.hasClass('mdui-tooltip-open')) {\n      inst.state = 'opened';\n      componentEvent('opened', 'tooltip', inst, inst.$target);\n    } else {\n      inst.state = 'closed';\n      componentEvent('closed', 'tooltip', inst, inst.$target);\n    }\n  };\n\n  /**\n   * 执行打开 Tooltip\n   * @private\n   */\n  Tooltip.prototype._doOpen = function () {\n    var _this = this;\n\n    _this.state = 'opening';\n    componentEvent('open', 'tooltip', _this, _this.$target);\n\n    _this.$tooltip\n      .addClass('mdui-tooltip-open')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 打开 Tooltip\n   * @param opts 允许每次打开时设置不同的参数\n   */\n  Tooltip.prototype.open = function (opts) {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    var oldOpts = $.extend({}, _this.options);\n\n    // 合并 data 属性参数\n    $.extend(_this.options, parseOptions(_this.$target.attr('mdui-tooltip')));\n    if (opts) {\n      $.extend(_this.options, opts);\n    }\n\n    // tooltip 的内容有更新\n    if (oldOpts.content !== _this.options.content) {\n      _this.$tooltip.html(_this.options.content);\n    }\n\n    setPosition(_this);\n\n    if (_this.options.delay) {\n      _this.timeoutId = setTimeout(function () {\n        _this._doOpen();\n      }, _this.options.delay);\n    } else {\n      _this.timeoutId = false;\n      _this._doOpen();\n    }\n  };\n\n  /**\n   * 关闭 Tooltip\n   */\n  Tooltip.prototype.close = function () {\n    var _this = this;\n\n    if (_this.timeoutId) {\n      clearTimeout(_this.timeoutId);\n      _this.timeoutId = false;\n    }\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    _this.state = 'closing';\n    componentEvent('close', 'tooltip', _this, _this.$target);\n\n    _this.$tooltip\n      .removeClass('mdui-tooltip-open')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 切换 Tooltip 状态\n   */\n  Tooltip.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  /**\n   * 获取 Tooltip 状态\n   * @returns {'opening'|'opened'|'closing'|'closed'}\n   */\n  Tooltip.prototype.getState = function () {\n    return this.state;\n  };\n\n  /**\n   * 销毁 Tooltip\n   */\n  /*Tooltip.prototype.destroy = function () {\n    var _this = this;\n    clearTimeout(_this.timeoutId);\n    $.data(_this.target, 'mdui.tooltip', null);\n    $.remove(_this.tooltip);\n  };*/\n\n  return Tooltip;\n\n})();\n","/**\n * =============================================================================\n * ************   Tooltip DATA API   ************\n * =============================================================================\n */\n\n$(function () {\n  // mouseenter 不能冒泡，所以这里用 mouseover 代替\n  $document.on('touchstart mouseover', '[mdui-tooltip]', function () {\n    var $this = $(this);\n\n    var inst = $this.data('mdui.tooltip');\n    if (!inst) {\n      var options = parseOptions($this.attr('mdui-tooltip'));\n      inst = new mdui.Tooltip($this, options);\n      $this.data('mdui.tooltip', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Snackbar   ************\n * =============================================================================\n */\n\n(function () {\n\n  /**\n   * 当前打开着的 Snackbar\n   */\n  var currentInst;\n\n  /**\n   * 对列名\n   * @type {string}\n   */\n  var queueName = '__md_snackbar';\n\n  var DEFAULT = {\n    timeout: 4000,                  // 在用户没有操作时多长时间自动隐藏\n    buttonText: '',                 // 按钮的文本\n    buttonColor: '',                // 按钮的颜色，支持 blue #90caf9 rgba(...)\n    position: 'bottom',             // 位置 bottom、top、left-top、left-bottom、right-top、right-bottom\n    closeOnButtonClick: true,       // 点击按钮时关闭\n    closeOnOutsideClick: true,      // 触摸或点击屏幕其他地方时关闭\n    onClick: function () {          // 在 Snackbar 上点击的回调\n    },\n\n    onButtonClick: function () {    // 点击按钮的回调\n    },\n\n    onOpen: function () {           // 打开动画开始时的回调\n    },\n\n    onOpened: function () {         // 打开动画结束时的回调\n    },\n\n    onClose: function () {          // 关闭动画开始时的回调\n    },\n\n    onClosed: function () {         // 打开动画结束时的回调\n    },\n  };\n\n  /**\n   * 点击 Snackbar 外面的区域关闭\n   * @param e\n   */\n  var closeOnOutsideClick = function (e) {\n    var $target = $(e.target);\n    if (!$target.hasClass('mdui-snackbar') && !$target.parents('.mdui-snackbar').length) {\n      currentInst.close();\n    }\n  };\n\n  /**\n   * Snackbar 实例\n   * @param message\n   * @param opts\n   * @constructor\n   */\n  function Snackbar(message, opts) {\n    var _this = this;\n\n    _this.message = message;\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n\n    // message 参数必须\n    if (!_this.message) {\n      return;\n    }\n\n    _this.state = 'closed';\n\n    _this.timeoutId = false;\n\n    // 按钮颜色\n    var buttonColorStyle = '';\n    var buttonColorClass = '';\n\n    if (\n      _this.options.buttonColor.indexOf('#') === 0 ||\n      _this.options.buttonColor.indexOf('rgb') === 0\n    ) {\n      buttonColorStyle = 'style=\"color:' + _this.options.buttonColor + '\"';\n    } else if (_this.options.buttonColor !== '') {\n      buttonColorClass = 'mdui-text-color-' + _this.options.buttonColor;\n    }\n\n    // 添加 HTML\n    _this.$snackbar = $(\n      '<div class=\"mdui-snackbar\">' +\n        '<div class=\"mdui-snackbar-text\">' +\n          _this.message +\n        '</div>' +\n        (_this.options.buttonText ?\n          ('<a href=\"javascript:void(0)\" ' +\n          'class=\"mdui-snackbar-action mdui-btn mdui-ripple mdui-ripple-white ' +\n            buttonColorClass + '\" ' +\n            buttonColorStyle + '>' +\n            _this.options.buttonText +\n          '</a>') :\n          ''\n        ) +\n      '</div>')\n      .appendTo(document.body);\n\n    // 设置位置\n    _this._setPosition('close');\n\n    _this.$snackbar\n      .reflow()\n      .addClass('mdui-snackbar-' + _this.options.position);\n  }\n\n  /**\n   * 设置 Snackbar 的位置\n   * @param state\n   * @private\n   */\n  Snackbar.prototype._setPosition = function (state) {\n    var _this = this;\n\n    var snackbarHeight = _this.$snackbar[0].clientHeight;\n    var position = _this.options.position;\n\n    var translateX;\n    var translateY;\n\n    // translateX\n    if (position === 'bottom' || position === 'top') {\n      translateX = '-50%';\n    } else {\n      translateX = '0';\n    }\n\n    // translateY\n    if (state === 'open') {\n      translateY = '0';\n    } else {\n      if (position === 'bottom') {\n        translateY = snackbarHeight;\n      }\n\n      if (position === 'top') {\n        translateY = -snackbarHeight;\n      }\n\n      if (position === 'left-top' || position === 'right-top') {\n        translateY = -snackbarHeight - 24;\n      }\n\n      if (position === 'left-bottom' || position === 'right-bottom') {\n        translateY = snackbarHeight + 24;\n      }\n    }\n\n    _this.$snackbar.transform('translate(' + translateX + ',' + translateY + 'px)');\n  };\n\n  /**\n   * 打开 Snackbar\n   */\n  Snackbar.prototype.open = function () {\n    var _this = this;\n\n    if (!_this.message) {\n      return;\n    }\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    // 如果当前有正在显示的 Snackbar，则先加入队列，等旧 Snackbar 关闭后再打开\n    if (currentInst) {\n      queue.queue(queueName, function () {\n        _this.open();\n      });\n\n      return;\n    }\n\n    currentInst = _this;\n\n    // 开始打开\n    _this.state = 'opening';\n    _this.options.onOpen();\n\n    _this._setPosition('open');\n\n    _this.$snackbar\n      .transitionEnd(function () {\n        if (_this.state !== 'opening') {\n          return;\n        }\n\n        _this.state = 'opened';\n        _this.options.onOpened();\n\n        // 有按钮时绑定事件\n        if (_this.options.buttonText) {\n          _this.$snackbar\n            .find('.mdui-snackbar-action')\n            .on('click', function () {\n              _this.options.onButtonClick();\n              if (_this.options.closeOnButtonClick) {\n                _this.close();\n              }\n            });\n        }\n\n        // 点击 snackbar 的事件\n        _this.$snackbar.on('click', function (e) {\n          if (!$(e.target).hasClass('mdui-snackbar-action')) {\n            _this.options.onClick();\n          }\n        });\n\n        // 点击 Snackbar 外面的区域关闭\n        if (_this.options.closeOnOutsideClick) {\n          $document.on(TouchHandler.start, closeOnOutsideClick);\n        }\n\n        // 超时后自动关闭\n        if (_this.options.timeout) {\n          _this.timeoutId = setTimeout(function () {\n            _this.close();\n          }, _this.options.timeout);\n        }\n      });\n  };\n\n  /**\n   * 关闭 Snackbar\n   */\n  Snackbar.prototype.close = function () {\n    var _this = this;\n\n    if (!_this.message) {\n      return;\n    }\n\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    if (_this.timeoutId) {\n      clearTimeout(_this.timeoutId);\n    }\n\n    if (_this.options.closeOnOutsideClick) {\n      $document.off(TouchHandler.start, closeOnOutsideClick);\n    }\n\n    _this.state = 'closing';\n    _this.options.onClose();\n\n    _this._setPosition('close');\n\n    _this.$snackbar\n      .transitionEnd(function () {\n        if (_this.state !== 'closing') {\n          return;\n        }\n\n        currentInst = null;\n        _this.state = 'closed';\n        _this.options.onClosed();\n        _this.$snackbar.remove();\n        queue.dequeue(queueName);\n      });\n  };\n\n  /**\n   * 打开 Snackbar\n   * @param message\n   * @param opts\n   */\n  mdui.snackbar = function (message, opts) {\n    if (typeof message !== 'string') {\n      opts = message;\n      message = opts.message;\n    }\n\n    var inst = new Snackbar(message, opts);\n\n    inst.open();\n    return inst;\n  };\n\n})();\n","/**\n * =============================================================================\n * ************   Bottom navigation 底部导航栏   ************\n * =============================================================================\n */\n\n(function () {\n\n  // 切换导航项\n  $document.on('click', '.mdui-bottom-nav>a', function () {\n    var $this = $(this);\n    var $bottomNav = $this.parent();\n    var isThis;\n    $bottomNav.children('a').each(function (i, item) {\n      isThis = $this.is(item);\n      if (isThis) {\n        componentEvent('change', 'bottomNav', null, $bottomNav, {\n          index: i,\n        });\n      }\n\n      $(item)[isThis ? 'addClass' : 'removeClass']('mdui-bottom-nav-active');\n    });\n  });\n\n  // 滚动时隐藏 mdui-bottom-nav-scroll-hide\n  mdui.mutation('.mdui-bottom-nav-scroll-hide', function () {\n    var $this = $(this);\n    var inst = new mdui.Headroom($this, {\n      pinnedClass: 'mdui-headroom-pinned-down',\n      unpinnedClass: 'mdui-headroom-unpinned-down',\n    });\n    $this.data('mdui.headroom', inst);\n  });\n\n})();\n","/**\n * =============================================================================\n * ************   Spinner 圆形进度条   ************\n * =============================================================================\n */\n\n(function () {\n  /**\n   * layer 的 HTML 结构\n   */\n  var layerHTML = function () {\n    var i = arguments.length ? arguments[0] : false;\n\n    return '<div class=\"mdui-spinner-layer ' + (i ? 'mdui-spinner-layer-' + i : '') + '\">' +\n               '<div class=\"mdui-spinner-circle-clipper mdui-spinner-left\">' +\n             '<div class=\"mdui-spinner-circle\"></div>' +\n             '</div>' +\n             '<div class=\"mdui-spinner-gap-patch\">' +\n               '<div class=\"mdui-spinner-circle\"></div>' +\n             '</div>' +\n             '<div class=\"mdui-spinner-circle-clipper mdui-spinner-right\">' +\n               '<div class=\"mdui-spinner-circle\"></div>' +\n             '</div>' +\n           '</div>';\n  };\n\n  /**\n   * 填充 HTML\n   * @param spinner\n   */\n  var fillHTML = function (spinner) {\n    var $spinner = $(spinner);\n    var layer;\n    if ($spinner.hasClass('mdui-spinner-colorful')) {\n      layer = layerHTML('1') + layerHTML('2') + layerHTML('3') + layerHTML('4');\n    } else {\n      layer = layerHTML();\n    }\n\n    $spinner.html(layer);\n  };\n\n  /**\n   * 页面加载完后自动填充 HTML 结构\n   */\n  mdui.mutation('.mdui-spinner', function () {\n    fillHTML(this);\n  });\n\n  /**\n   * 更新圆形进度条\n   */\n  mdui.updateSpinners = function () {\n    $(arguments.length ? arguments[0] : '.mdui-spinner').each(function () {\n      fillHTML(this);\n    });\n  };\n\n})();\n\n","/**\n * =============================================================================\n * ************   Expansion panel 可扩展面板   ************\n * =============================================================================\n */\n\nmdui.Panel = (function () {\n\n  function Panel(selector, opts) {\n    return new CollapsePrivate(selector, opts, 'panel');\n  }\n\n  return Panel;\n\n})();\n","/**\n * =============================================================================\n * ************   Expansion panel 自定义属性   ************\n * =============================================================================\n */\n\n$(function () {\n  mdui.mutation('[mdui-panel]', function () {\n    var $target = $(this);\n\n    var inst = $target.data('mdui.panel');\n    if (!inst) {\n      var options = parseOptions($target.attr('mdui-panel'));\n      inst = new mdui.Panel($target, options);\n      $target.data('mdui.panel', inst);\n    }\n  });\n});\n","/**\n * =============================================================================\n * ************   Menu 菜单   ************\n * =============================================================================\n */\n\nmdui.Menu = (function () {\n\n  /**\n   * 默认参数\n   */\n  var DEFAULT = {\n    position: 'auto',         // 菜单位置 top、bottom、center、auto\n    align: 'auto',            // 菜单和触发它的元素的对齐方式 left、right、center、auto\n    gutter: 16,               // 菜单距离窗口边缘的最小距离，单位 px\n    fixed: false,             // 是否使菜单固定在窗口，不随滚动条滚动\n    covered: 'auto',          // 菜单是否覆盖在触发它的元素上，true、false。auto 时简单菜单覆盖，级联菜单不覆盖\n    subMenuTrigger: 'hover',  // 子菜单的触发方式 hover、click\n    subMenuDelay: 200,        // 子菜单的触发延时，仅在 submenuTrigger 为 hover 有效\n  };\n\n  /**\n   * 调整主菜单位置\n   * @param _this 实例\n   */\n  var readjust = function (_this) {\n    var menuLeft;\n    var menuTop;\n\n    // 菜单位置和方向\n    var position;\n    var align;\n\n    // window 窗口的宽度和高度\n    var windowHeight = $window.height();\n    var windowWidth = $window.width();\n\n    // 配置参数\n    var gutter = _this.options.gutter;\n    var isCovered = _this.isCovered;\n    var isFixed = _this.options.fixed;\n\n    // 动画方向参数\n    var transformOriginX;\n    var transformOriginY;\n\n    // 菜单的原始宽度和高度\n    var menuWidth = _this.$menu.width();\n    var menuHeight = _this.$menu.height();\n\n    var $anchor = _this.$anchor;\n\n    // 触发菜单的元素在窗口中的位置\n    var anchorTmp = $anchor[0].getBoundingClientRect();\n    var anchorTop = anchorTmp.top;\n    var anchorLeft = anchorTmp.left;\n    var anchorHeight = anchorTmp.height;\n    var anchorWidth = anchorTmp.width;\n    var anchorBottom = windowHeight - anchorTop - anchorHeight;\n    var anchorRight = windowWidth - anchorLeft - anchorWidth;\n\n    // 触发元素相对其拥有定位属性的父元素的位置\n    var anchorOffsetTop = $anchor[0].offsetTop;\n    var anchorOffsetLeft = $anchor[0].offsetLeft;\n\n    // ===============================\n    // ================= 自动判断菜单位置\n    // ===============================\n    if (_this.options.position === 'auto') {\n\n      // 判断下方是否放得下菜单\n      if (anchorBottom + (isCovered ? anchorHeight : 0) > menuHeight + gutter) {\n        position = 'bottom';\n      }\n\n      // 判断上方是否放得下菜单\n      else if (anchorTop + (isCovered ? anchorHeight : 0) > menuHeight + gutter) {\n        position = 'top';\n      }\n\n      // 上下都放不下，居中显示\n      else {\n        position = 'center';\n      }\n    } else {\n      position = _this.options.position;\n    }\n\n    // ===============================\n    // ============== 自动判断菜单对齐方式\n    // ===============================\n    if (_this.options.align === 'auto') {\n\n      // 判断右侧是否放得下菜单\n      if (anchorRight + anchorWidth > menuWidth + gutter) {\n        align = 'left';\n      }\n\n      // 判断左侧是否放得下菜单\n      else if (anchorLeft + anchorWidth > menuWidth + gutter) {\n        align = 'right';\n      }\n\n      // 左右都放不下，居中显示\n      else {\n        align = 'center';\n      }\n    } else {\n      align = _this.options.align;\n    }\n\n    // ===============================\n    // ==================== 设置菜单位置\n    // ===============================\n    if (position === 'bottom') {\n      transformOriginY = '0';\n\n      menuTop =\n        (isCovered ? 0 : anchorHeight) +\n        (isFixed ? anchorTop : anchorOffsetTop);\n\n    } else if (position === 'top') {\n      transformOriginY = '100%';\n\n      menuTop =\n        (isCovered ? anchorHeight : 0) +\n        (isFixed ? (anchorTop - menuHeight) : (anchorOffsetTop - menuHeight));\n\n    } else {\n      transformOriginY = '50%';\n\n      // =====================在窗口中居中\n      // 显示的菜单的高度，简单菜单高度不超过窗口高度，若超过了则在菜单内部显示滚动条\n      // 级联菜单内部不允许出现滚动条\n      var menuHeightTemp = menuHeight;\n\n      // 简单菜单比窗口高时，限制菜单高度\n      if (!_this.isCascade) {\n        if (menuHeight + gutter * 2 > windowHeight) {\n          menuHeightTemp = windowHeight - gutter * 2;\n          _this.$menu.height(menuHeightTemp);\n        }\n      }\n\n      menuTop =\n        (windowHeight - menuHeightTemp) / 2 +\n        (isFixed ? 0 : (anchorOffsetTop - anchorTop));\n    }\n\n    _this.$menu.css('top', menuTop + 'px');\n\n    // ===============================\n    // ================= 设置菜单对齐方式\n    // ===============================\n    if (align === 'left') {\n      transformOriginX = '0';\n\n      menuLeft = isFixed ? anchorLeft : anchorOffsetLeft;\n\n    } else if (align === 'right') {\n      transformOriginX = '100%';\n\n      menuLeft = isFixed ?\n        (anchorLeft + anchorWidth - menuWidth) :\n        (anchorOffsetLeft + anchorWidth - menuWidth);\n    } else {\n      transformOriginX = '50%';\n\n      //=======================在窗口中居中\n      // 显示的菜单的宽度，菜单宽度不能超过窗口宽度\n      var menuWidthTemp = menuWidth;\n\n      // 菜单比窗口宽，限制菜单宽度\n      if (menuWidth + gutter * 2 > windowWidth) {\n        menuWidthTemp = windowWidth - gutter * 2;\n        _this.$menu.width(menuWidthTemp);\n      }\n\n      menuLeft =\n        (windowWidth - menuWidthTemp) / 2 +\n        (isFixed ? 0 : anchorOffsetLeft - anchorLeft);\n    }\n\n    _this.$menu.css('left', menuLeft + 'px');\n\n    // 设置菜单动画方向\n    _this.$menu.transformOrigin(transformOriginX + ' ' + transformOriginY);\n  };\n\n  /**\n   * 调整子菜单的位置\n   * @param $submenu\n   */\n  var readjustSubmenu = function ($submenu) {\n    var $item = $submenu.parent('.mdui-menu-item');\n\n    var submenuTop;\n    var submenuLeft;\n\n    // 子菜单位置和方向\n    var position; // top、bottom\n    var align; // left、right\n\n    // window 窗口的宽度和高度\n    var windowHeight = $window.height();\n    var windowWidth = $window.width();\n\n    // 动画方向参数\n    var transformOriginX;\n    var transformOriginY;\n\n    // 子菜单的原始宽度和高度\n    var submenuWidth = $submenu.width();\n    var submenuHeight = $submenu.height();\n\n    // 触发子菜单的菜单项的宽度高度\n    var itemTmp = $item[0].getBoundingClientRect();\n    var itemWidth = itemTmp.width;\n    var itemHeight = itemTmp.height;\n    var itemLeft = itemTmp.left;\n    var itemTop = itemTmp.top;\n\n    // ===================================\n    // ===================== 判断菜单上下位置\n    // ===================================\n\n    // 判断下方是否放得下菜单\n    if (windowHeight - itemTop > submenuHeight) {\n      position = 'bottom';\n    }\n\n    // 判断上方是否放得下菜单\n    else if (itemTop + itemHeight > submenuHeight) {\n      position = 'top';\n    }\n\n    // 默认放在下方\n    else {\n      position = 'bottom';\n    }\n\n    // ====================================\n    // ====================== 判断菜单左右位置\n    // ====================================\n\n    // 判断右侧是否放得下菜单\n    if (windowWidth - itemLeft - itemWidth > submenuWidth) {\n      align = 'left';\n    }\n\n    // 判断左侧是否放得下菜单\n    else if (itemLeft > submenuWidth) {\n      align = 'right';\n    }\n\n    // 默认放在右侧\n    else {\n      align = 'left';\n    }\n\n    // ===================================\n    // ======================== 设置菜单位置\n    // ===================================\n    if (position === 'bottom') {\n      transformOriginY = '0';\n      submenuTop = '0';\n    } else if (position === 'top') {\n      transformOriginY = '100%';\n      submenuTop = -submenuHeight + itemHeight;\n    }\n\n    $submenu.css('top', submenuTop + 'px');\n\n    // ===================================\n    // ===================== 设置菜单对齐方式\n    // ===================================\n    if (align === 'left') {\n      transformOriginX = '0';\n      submenuLeft = itemWidth;\n    } else if (align === 'right') {\n      transformOriginX = '100%';\n      submenuLeft = -submenuWidth;\n    }\n\n    $submenu.css('left', submenuLeft + 'px');\n\n    // 设置菜单动画方向\n    $submenu.transformOrigin(transformOriginX + ' ' + transformOriginY);\n  };\n\n  /**\n   * 打开子菜单\n   * @param $submenu\n   */\n  var openSubMenu = function ($submenu) {\n    readjustSubmenu($submenu);\n\n    $submenu\n      .addClass('mdui-menu-open')\n      .parent('.mdui-menu-item')\n      .addClass('mdui-menu-item-active');\n  };\n\n  /**\n   * 关闭子菜单，及其嵌套的子菜单\n   * @param $submenu\n   */\n  var closeSubMenu = function ($submenu) {\n    // 关闭子菜单\n    $submenu\n      .removeClass('mdui-menu-open')\n      .addClass('mdui-menu-closing')\n      .transitionEnd(function () {\n        $submenu.removeClass('mdui-menu-closing');\n      })\n\n      // 移除激活状态的样式\n      .parent('.mdui-menu-item')\n      .removeClass('mdui-menu-item-active');\n\n    // 循环关闭嵌套的子菜单\n    $submenu.find('.mdui-menu').each(function () {\n      var $subSubmenu = $(this);\n      $subSubmenu\n        .removeClass('mdui-menu-open')\n        .addClass('mdui-menu-closing')\n        .transitionEnd(function () {\n          $subSubmenu.removeClass('mdui-menu-closing');\n        })\n        .parent('.mdui-menu-item')\n        .removeClass('mdui-menu-item-active');\n    });\n  };\n\n  /**\n   * 切换子菜单状态\n   * @param $submenu\n   */\n  var toggleSubMenu = function ($submenu) {\n    if ($submenu.hasClass('mdui-menu-open')) {\n      closeSubMenu($submenu);\n    } else {\n      openSubMenu($submenu);\n    }\n  };\n\n  /**\n   * 绑定子菜单事件\n   * @param inst 实例\n   */\n  var bindSubMenuEvent = function (inst) {\n    // 点击打开子菜单\n    inst.$menu.on('click', '.mdui-menu-item', function (e) {\n      var $this = $(this);\n      var $target = $(e.target);\n\n      // 禁用状态菜单不操作\n      if ($this.attr('disabled') !== null) {\n        return;\n      }\n\n      // 没有点击在子菜单的菜单项上时，不操作（点在了子菜单的空白区域、或分隔线上）\n      if ($target.is('.mdui-menu') || $target.is('.mdui-divider')) {\n        return;\n      }\n\n      // 阻止冒泡，点击菜单项时只在最后一级的 mdui-menu-item 上生效，不向上冒泡\n      if (!$target.parents('.mdui-menu-item').eq(0).is($this)) {\n        return;\n      }\n\n      // 当前菜单的子菜单\n      var $submenu = $this.children('.mdui-menu');\n\n      // 先关闭除当前子菜单外的所有同级子菜单\n      $this.parent('.mdui-menu').children('.mdui-menu-item').each(function () {\n        var $tmpSubmenu = $(this).children('.mdui-menu');\n        if (\n          $tmpSubmenu.length &&\n          (!$submenu.length || !$tmpSubmenu.is($submenu))\n        ) {\n          closeSubMenu($tmpSubmenu);\n        }\n      });\n\n      // 切换当前子菜单\n      if ($submenu.length) {\n        toggleSubMenu($submenu);\n      }\n    });\n\n    if (inst.options.subMenuTrigger === 'hover') {\n      // 临时存储 setTimeout 对象\n      var timeout;\n\n      var timeoutOpen;\n      var timeoutClose;\n\n      inst.$menu.on('mouseover mouseout', '.mdui-menu-item', function (e) {\n        var $this = $(this);\n        var eventType = e.type;\n        var $relatedTarget = $(e.relatedTarget);\n\n        // 禁用状态的菜单不操作\n        if ($this.attr('disabled') !== null) {\n          return;\n        }\n\n        // 用 mouseover 模拟 mouseenter\n        if (eventType === 'mouseover') {\n          if (!$this.is($relatedTarget) && $.contains($this[0], $relatedTarget[0])) {\n            return;\n          }\n        }\n\n        // 用 mouseout 模拟 mouseleave\n        else if (eventType === 'mouseout') {\n          if ($this.is($relatedTarget) || $.contains($this[0], $relatedTarget[0])) {\n            return;\n          }\n        }\n\n        // 当前菜单项下的子菜单，未必存在\n        var $submenu = $this.children('.mdui-menu');\n\n        // 鼠标移入菜单项时，显示菜单项下的子菜单\n        if (eventType === 'mouseover') {\n          if ($submenu.length) {\n\n            // 当前子菜单准备打开时，如果当前子菜单正准备着关闭，不用再关闭了\n            var tmpClose = $submenu.data('timeoutClose.mdui.menu');\n            if (tmpClose) {\n              clearTimeout(tmpClose);\n            }\n\n            // 如果当前子菜单已经打开，不操作\n            if ($submenu.hasClass('mdui-menu-open')) {\n              return;\n            }\n\n            // 当前子菜单准备打开时，其他准备打开的子菜单不用再打开了\n            clearTimeout(timeoutOpen);\n\n            // 准备打开当前子菜单\n            timeout = timeoutOpen = setTimeout(function () {\n              openSubMenu($submenu);\n            }, inst.options.subMenuDelay);\n\n            $submenu.data('timeoutOpen.mdui.menu', timeout);\n          }\n        }\n\n        // 鼠标移出菜单项时，关闭菜单项下的子菜单\n        else if (eventType === 'mouseout') {\n          if ($submenu.length) {\n\n            // 鼠标移出菜单项时，如果当前菜单项下的子菜单正准备打开，不用再打开了\n            var tmpOpen = $submenu.data('timeoutOpen.mdui.menu');\n            if (tmpOpen) {\n              clearTimeout(tmpOpen);\n            }\n\n            // 准备关闭当前子菜单\n            timeout = timeoutClose = setTimeout(function () {\n              closeSubMenu($submenu);\n            }, inst.options.subMenuDelay);\n\n            $submenu.data('timeoutClose.mdui.menu', timeout);\n          }\n        }\n      });\n    }\n  };\n\n  /**\n   * 菜单\n   * @param anchorSelector 点击该元素触发菜单\n   * @param menuSelector 菜单\n   * @param opts 配置项\n   * @constructor\n   */\n  function Menu(anchorSelector, menuSelector, opts) {\n    var _this = this;\n\n    // 触发菜单的元素\n    _this.$anchor = $(anchorSelector).eq(0);\n    if (!_this.$anchor.length) {\n      return;\n    }\n\n    // 已通过自定义属性实例化过，不再重复实例化\n    var oldInst = _this.$anchor.data('mdui.menu');\n    if (oldInst) {\n      return oldInst;\n    }\n\n    _this.$menu = $(menuSelector).eq(0);\n\n    // 触发菜单的元素 和 菜单必须是同级的元素，否则菜单可能不能定位\n    if (!_this.$anchor.siblings(_this.$menu).length) {\n      return;\n    }\n\n    _this.options = $.extend({}, DEFAULT, (opts || {}));\n    _this.state = 'closed';\n\n    // 是否是级联菜单\n    _this.isCascade = _this.$menu.hasClass('mdui-menu-cascade');\n\n    // covered 参数处理\n    if (_this.options.covered === 'auto') {\n      _this.isCovered = !_this.isCascade;\n    } else {\n      _this.isCovered = _this.options.covered;\n    }\n\n    // 点击触发菜单切换\n    _this.$anchor.on('click', function () {\n      _this.toggle();\n    });\n\n    // 点击菜单外面区域关闭菜单\n    $document.on('click touchstart', function (e) {\n      var $target = $(e.target);\n      if (\n        (_this.state === 'opening' || _this.state === 'opened') &&\n          !$target.is(_this.$menu) &&\n          !$.contains(_this.$menu[0], $target[0]) &&\n          !$target.is(_this.$anchor) &&\n          !$.contains(_this.$anchor[0], $target[0])\n      ) {\n        _this.close();\n      }\n    });\n\n    // 点击不含子菜单的菜单条目关闭菜单\n    $document.on('click', '.mdui-menu-item', function (e) {\n      var $this = $(this);\n      if (!$this.find('.mdui-menu').length && $this.attr('disabled') === null) {\n        _this.close();\n      }\n    });\n\n    // 绑定点击或鼠标移入含子菜单的条目的事件\n    bindSubMenuEvent(_this);\n\n    // 窗口大小变化时，重新调整菜单位置\n    $window.on('resize', $.throttle(function () {\n      readjust(_this);\n    }, 100));\n  }\n\n  /**\n   * 切换菜单状态\n   */\n  Menu.prototype.toggle = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      _this.close();\n    } else if (_this.state === 'closing' || _this.state === 'closed') {\n      _this.open();\n    }\n  };\n\n  /**\n   * 动画结束回调\n   * @param inst\n   */\n  var transitionEnd = function (inst) {\n    inst.$menu.removeClass('mdui-menu-closing');\n\n    if (inst.state === 'opening') {\n      inst.state = 'opened';\n      componentEvent('opened', 'menu', inst, inst.$menu);\n    }\n\n    if (inst.state === 'closing') {\n      inst.state = 'closed';\n      componentEvent('closed', 'menu', inst, inst.$menu);\n\n      // 关闭后，恢复菜单样式到默认状态，并恢复 fixed 定位\n      inst.$menu.css({\n        top: '',\n        left: '',\n        width: '',\n        position: 'fixed',\n      });\n    }\n  };\n\n  /**\n   * 打开菜单\n   */\n  Menu.prototype.open = function () {\n    var _this = this;\n\n    if (_this.state === 'opening' || _this.state === 'opened') {\n      return;\n    }\n\n    _this.state = 'opening';\n    componentEvent('open', 'menu', _this, _this.$menu);\n\n    // 调整菜单位置\n    readjust(_this);\n\n    _this.$menu\n\n      // 菜单隐藏状态使用使用 fixed 定位。\n      .css('position', _this.options.fixed ? 'fixed' : 'absolute')\n\n      // 打开菜单\n      .addClass('mdui-menu-open')\n\n      // 打开动画完成后\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  /**\n   * 关闭菜单\n   */\n  Menu.prototype.close = function () {\n    var _this = this;\n    if (_this.state === 'closing' || _this.state === 'closed') {\n      return;\n    }\n\n    _this.state = 'closing';\n    componentEvent('close', 'menu', _this, _this.$menu);\n\n    // 菜单开始关闭时，关闭所有子菜单\n    _this.$menu.find('.mdui-menu').each(function () {\n      closeSubMenu($(this));\n    });\n\n    _this.$menu\n      .removeClass('mdui-menu-open')\n      .addClass('mdui-menu-closing')\n      .transitionEnd(function () {\n        transitionEnd(_this);\n      });\n  };\n\n  return Menu;\n})();\n","/**\n * =============================================================================\n * ************   Menu 自定义属性 API   ************\n * =============================================================================\n */\n\n$(function () {\n  $document.on('click', '[mdui-menu]', function () {\n    var $this = $(this);\n\n    var inst = $this.data('mdui.menu');\n    if (!inst) {\n      var options = parseOptions($this.attr('mdui-menu'));\n      var menuSelector = options.target;\n      delete options.target;\n\n      inst = new mdui.Menu($this, menuSelector, options);\n      $this.data('mdui.menu', inst);\n\n      inst.toggle();\n    }\n  });\n});\n"]}